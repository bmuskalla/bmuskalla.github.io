<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benjamin Muskalla</title>
    <link>https://bmuskalla.github.io/</link>
    <description>Recent content on Benjamin Muskalla</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 28 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://bmuskalla.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The &#39;Simplify protocol&#39; refactoring</title>
      <link>https://bmuskalla.github.io/blog/2021-06-28-simplify-protocol/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2021-06-28-simplify-protocol/</guid>
      <description>&lt;p&gt;The other day, I went grocery shopping. While waiting in line, I thought about some struggles I had in a test I wrote earlier that day. When it was my turn, the cashier scanned my items and said what I owe him. And I just gave him my whole wallet. He stared at me blankly and gave it back. A little confused for a second, I took out my card, paid, and left the store. And at that point, it hit me what was wrong with my test.
Let’s have a look at the test and see what it has to do with grocery shopping:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;givenAccountWithBalanceReporterShouldPrintSummary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Account account &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; createTestAccount&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    EndOfYearReporter printer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlainTextEndOfYearReporter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    String report &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; printer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;produceReport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;report&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Benny: -39 EUR&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far, so good. Overall, the idea of the test is pretty simple and well written. The problem is the part that I omitted. How do we set up the account?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Account &lt;span style=&#34;color:#a6e22e&#34;&gt;createTestAccount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String username&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; balance&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Account account &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    HolderMetadata metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HolderMetadata&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    when&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;metadata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFullname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getOwner&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;metadata&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    Subaccount subaccount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Subaccount&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    subaccount&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setBalance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;balance&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSubaccounts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;subaccount&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given our domain model got lost in between annotations, DI frameworks, and other funky technologies, we had to start mocking out parts of the model. In this case, we got away with only mocking a few things tightly related to what we do. More often than not, this usually turns into a nightmare of mocking (transitive) dependencies to get the object into the state you want it in. While generally, the advice is to keep your domain model independent of technology (and not mock stuff you don’t own), it’s often easier said than done. So if we can’t easily change our domain model, how do we use this model in our report generator?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getOwner&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFullname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSubaccounts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapToInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Subaccount&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;getBalance&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
String currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSubaccounts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s %d %s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; username&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; balance&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; currency&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To produce a simple report, we have to navigate our way through the object graph, collect all the data we need and do some processing (e.g. sum). While this is something we have to do anyway, the question becomes: is it really what the report generation should do? What if we add another report besides our plain text? That would need to replicate the same logic. What about changes to our domain model? We’ll have to go and fiddle around with the PDF reporting, which broke due to those changes (usually referred to as &lt;a href=&#34;https://refactoring.guru/smells/shotgun-surgery&#34;&gt;Shotgun Surgery&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let’s try something. Instead of giving the cashier our whole wallet, let’s just give them what they need. Not more, not less.
&lt;br&gt;
&lt;br&gt;
Introducing the “&lt;strong&gt;Simplify Protocol&lt;/strong&gt;” refactoring.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a &lt;a href=&#34;http://xunitpatterns.com/SUT.html&#34;&gt;unit under test&lt;/a&gt;, look at all the inputs (constructor arguments, method parameters) and try to replace them with the most trivial type available. Try to deliberately avoid parameter objects and use the most fundamental parameter types possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then, just like you do in test-driven development, let’s try the most simple thing that works and refactor later. What we need for the report right now are three things: The account holder, the balance, and the currency. Let’s go with this first and see how far to get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;givenAccountWithBalanceReporterShouldPrintSummary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    EndOfYearReporter printer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlainTextEndOfYearReporter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Benny&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;39&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EUR&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    String report &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; printer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;produceReport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;report&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Benny: -39 EUR&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hm. That’s a lot easier for our test. But that doesn’t entirely solve the problem in our production code that needs to call our reporter. And most of you will think,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Hey Benny, a stringly-typed API is not great. You should have a strongly-typed API.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is what I love about the “Simplify Protocol” refactoring. It’s not one of the refactorings you do in isolation. It highlights the shortcomings and helps you to work towards an appropriate pattern. What do I mean by that?
&lt;br&gt;
&lt;br&gt;
Given our initial setup, we had a single parameter for our reporter. At first sight, none of the apparent patterns (e.g., Adapter, Facade, ..)  was applicable - at least not at first sight. But using the “Simplify Protocol” refactoring helped us to see our reporter&amp;rsquo;s dependencies. Quite often, we pass arguments that are way larger than what we need. I’ve seen too much code where &lt;a href=&#34;https://en.wikipedia.org/wiki/God_object&#34;&gt;God classes&lt;/a&gt; (usually called something believable like “Context”) are the inputs and require a whole mocking ceremony to be instantiated.&lt;/p&gt;
&lt;p&gt;Given the exploded set of “trivially-typed” inputs, it’s time to consider whether we want to combine them into more helpful abstractions. For example, raw amount and currency can be refactored into an “Amount” &lt;a href=&#34;https://en.wikipedia.org/wiki/Value_object&#34;&gt;Value Object&lt;/a&gt;. Likewise, the &amp;lsquo;Amount&amp;rsquo; and &amp;lsquo;Username&amp;rsquo; form the inputs of our report and can be replaced by a parameter object. If you do, check whether it makes sense to make it specific for our unit under test. Too often, people strive for something reusable and, before they realize it, pass around a Map of objects called “Context”.&lt;/p&gt;
&lt;p&gt;Alternatively, as we still need to extract the values from our actual domain model, we can use the adapter as &amp;ldquo;a view&amp;rdquo; on the existing domain model.&lt;/p&gt;
&lt;p&gt;For the inputs to our report, we define a parameter object/view/record/bean that helps us to capture only the necessary data we need for the reporter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; record &lt;span style=&#34;color:#a6e22e&#34;&gt;EndOfYearReportInput&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String username&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; MoneyAmount amount&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes our test a lot simpler as we can now set up different report data for the various scenarios quickly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;MoneyAmount amount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MoneyAmount&lt;span style=&#34;color:#f92672&#34;&gt;(-&lt;/span&gt;39&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EUR&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
EndOfYearReportData reportData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndOfYearReportData&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Benny&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; amount&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
EndOfYearReporter printer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndOfYearReporter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;reportData&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the production code, we still need to adapt the domain model to our new record, either using an Adapter or (as shown here) a Factory method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EndOfYearReportData &lt;span style=&#34;color:#a6e22e&#34;&gt;fromAccount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Account account&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    String username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getOwner&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFullname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSubaccounts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapToInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Subaccount&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;getBalance&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    String currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSubaccounts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    MoneyAmount amount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MoneyAmount&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;balance&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; currency&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndOfYearReportData&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; amount&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We already have all the patterns at hand to solve these kinds of problems. &lt;em&gt;Sometimes, you need to make code more trivial to see the higher-level patterns that solve the issue at hand more elegantly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And the moral of the story? Keep your wallet to yourself; only hand out what the other side needs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Archeology</title>
      <link>https://bmuskalla.github.io/blog/2021-01-12-git-archeology/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2021-01-12-git-archeology/</guid>
      <description>&lt;p&gt;Working on a large codebase, it&amp;rsquo;s pretty normal to not remember every small or large subsystem or implementation choice. Be it whether you&amp;rsquo;re new to a codebase, or you&amp;rsquo;ve been focussed on a specific area of the codebase. When working on refactorings or bug fixes, I often end up in areas I might not be too familiar with. Generally not dramatic, it happens quite often that I&amp;rsquo;m stopping at what I&amp;rsquo;m doing because I need to decide on how to move forward.  As software engineers, we have to make so many micro-decisions every minute that we&amp;rsquo;re pretty used to it. Depending on the code and domain knowledge, we often find ourselves in situations where we need more context to make an informed decision. Tests usually provide a pretty good context but depending on their granularity and naming, they might only tell is &amp;ldquo;what&amp;rdquo; is in the implementation but miss the &amp;ldquo;why&amp;rdquo;. And if we try to decide whether we can remove a certain check or rework a behavior, we need to understand why it was introduced in the first place. Usually, we resort to looking at the commit that introduced the change or the tickets associated with the commit.
&lt;br&gt;
&lt;a href=&#34;https://www.instagram.com/marcos.lange77/&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/git-archeology/unearth.jpg&#34; alt=&#34;Photo by Marcus Lange from Pexels&#34;&gt;&lt;/a&gt;
&lt;br&gt;
Most people will start with using git blame (or the respective functionality within their IDE/editor). But on most non-trivial projects, you usually end up with a refactoring commit, a rename, or a trivial cross-project fix like switching to another assertion library. At first glance, we only see the most recent changes, not the most important ones.
We need to carefully remove layer by layer of sand and dirt that has been swept over the real changes to unearth them.&lt;/p&gt;
&lt;h2 id=&#34;moving-backwards-in-time&#34;&gt;Moving Backwards In Time&lt;/h2&gt;
&lt;p&gt;A simple &lt;code&gt;git blame&lt;/code&gt; shows us only the most recernt changes. Assuming it&amp;rsquo;s a simple move within the file or a whitespace fix, we can
ignore those using the flags that &lt;code&gt;git blame&lt;/code&gt; offer us:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;-w&lt;/dt&gt;
  &lt;dd&gt;ignores whitespace changes&lt;/dd&gt;
  &lt;dt&gt;-M&lt;/dt&gt;
  &lt;dd&gt;ignores changes if the line was just moved/copied within the same file&lt;/dd&gt;
  &lt;dt&gt;-C&lt;/dt&gt;
  &lt;dd&gt;ignores changes if the line was just moved/coped from other files&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The above flags are already useful. Most of them are not only available on the command line though, they&amp;rsquo;re usually available in the various editors as well
(feel free to show how it&amp;rsquo;s done in your editor and share &lt;a href=&#34;https://twitter.com/bmuskalla&#34;&gt;on Twitter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/git-archeology/intellij_options.png&#34; alt=&#34;IntelliJ VCS Annotation Options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Usually, this allows to hide some of the more trivial commits but requires &lt;code&gt;git&lt;/code&gt; to detect them as such. More often, we (as engineers) can easily gauge
whether a commit is relevant for our search based on commit message, author, and coding practices. Luckily, this can also easily be achieved by the various
editors by moving backward commit-wise. Looking at the history on GitHub, you can use the &amp;ldquo;View blame prior to this change&amp;rdquo; feature:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/git-archeology/github_prior.png&#34; alt=&#34;GitHub prior commits&#34;&gt;&lt;/p&gt;
&lt;p&gt;Similarly, IntelliJ-based IDEs allow you to do the same using &amp;ldquo;Annotate Previous Revision&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/git-archeology/annotate_previous.png&#34; alt=&#34;IntelliJ Annotate Previous Commit&#34;&gt;&lt;/p&gt;
&lt;p&gt;In case you&amp;rsquo;re using Visual Studio Code, the excellent &amp;ldquo;GitLense&amp;rdquo; extension offers similar commands:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/git-archeology/gitlense_previous.png&#34; alt=&#34;Visual Studio Code Show Previous Commit&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h2&gt;
&lt;p&gt;Depending on what we&amp;rsquo;re looking for, we may not want to uncover commit by commit until we find the initial commit that introduced something. Let&amp;rsquo;s say that we&amp;rsquo;re working with a customer who sees a specific error message on an older version of our product. On &lt;code&gt;main&lt;/code&gt;, this error message is not present anymore as somebody refactored the code already. To dig into this, we&amp;rsquo;ll have to find out when this error message got introduced. One way to pick through the whole history in the search for the holy grail..err..the error message is to use git pickaxe. Pickaxe is part of git log can be used as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log -S&#39;errorMessage&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, it will spit out all commits that introduced or removed the string &lt;code&gt;errorMessage&lt;/code&gt; in any way. Especially with error messages, you may be looking for an error message template that has variables in there. Luckily, git has us covered: you can use &lt;code&gt;--pickaxe-regex&lt;/code&gt; and use &lt;code&gt;-S&amp;lt;regexp&amp;gt;&lt;/code&gt; to find matching commits. Be aware that using -S will only find commits that change the number of times a string is found (addition/deletion). If you&amp;rsquo;re also looking for a commit that changed  the position of a string (e.g. a refactoring that moved the keyword around), you are better of using the &lt;code&gt;-G&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log -G&amp;quot;error.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;skipping-history&#34;&gt;Skipping History&lt;/h2&gt;
&lt;p&gt;Whether you move forward or backward through history, there will always be the &amp;ldquo;big bang&amp;rdquo; refactorings that get in your way.
Be it that your team decided to agree on certain line endings, a large split of the codebase or a rename to align the codebase with
the &lt;a href=&#34;https://www.jamesshore.com/v2/books/aoad1/ubiquitous_language&#34;&gt;ubiquitous language&lt;/a&gt;. So these changes are usually
never interesting in the context of wading through the history for a specific line and Git has some neat features that allow us to
skip those when looking at &lt;code&gt;git blame&lt;/code&gt; for a file.
The simple approach is to pass all commit ids that we want to ignore using &lt;code&gt;--ignore-rev&lt;/code&gt; as the following example shows.
Given this history for a file, consisting of the important change as well as a commit that just refactored the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❯ git log
commit 301b7eca0eb57737e160f5d2d16208f65c4156d6 (HEAD -&amp;gt; master)
Author: Benjamin Muskalla &amp;lt;bmuskalla@gradle.com&amp;gt;
Date:   Tue Jan 12 11:38:40 2021 +0100

    Reformat all source files

commit bd3fca50ee1659e740e2f6744d95e737418f1f40
Author: Benjamin Muskalla &amp;lt;bmuskalla@gradle.com&amp;gt;
Date:   Tue Jan 12 11:38:12 2021 +0100

    Important change
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, regular git blame shows the most recent changes on the file. This is the commit reformatting the file which is irrelevant for us. We want to see an important change.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❯ git blame sourcefile.py
301b7eca 1) import random
301b7eca 2)
301b7eca 3) print(random.randint(0,9))
301b7eca 4)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So using the &amp;ldquo;ignore revisions&amp;rdquo; feature allows us to explicitly ignore specific commits,  thus showing us the commit we&amp;rsquo;re interested in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git blame --ignore-rev 301b7ec sourcefile.py
^bd3fca5 1) import random
301b7eca 2)
^bd3fca5 3) print(random.randint(0,9))
301b7eca 4)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Throughout the lifetime of a project, this approach certainly doesn&amp;rsquo;t scale. There will always be commits that should be ignored in those
cases. Based on the same approach, &lt;code&gt;git blame&lt;/code&gt; allows you to specify a file that contains a list of commits to be ignored.
This is not only handy as you can check it in with all your other files, but it&amp;rsquo;s also easy to share this within your team so everybody can leverage this as well.
In our example, let&amp;rsquo;s call it &lt;code&gt;.git-blame-ignored-revs&lt;/code&gt; and specify which commits should be ignored using their commit hash. You can use &lt;code&gt;#&lt;/code&gt; to add comments to the file as well.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ignore pure formatting commits
301b7eca0eb57737e160f5d2d16208f65c4156d6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can now manually use this file as your source of filters using &lt;code&gt;--ignore-revs-file&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❯ git blame -s --ignore-revs-file=.git-blame-ignored-revs sourcefile.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want this to be the default behavior, you can either create a git alias for this or even configure git to always use this file. With this configuration, git blame will always ignore the commits in &lt;code&gt;.git-blame-ignored-revs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❯ git config blame.ignoreRevsFile .git-blame-ignored-revs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A nice side-effect of using &lt;code&gt;git config&lt;/code&gt; is that other tools and editors that rely on the command line tools behaviour just fall in line with these settings.
For example, IntelliJ IDEA shows the &amp;ldquo;Important Change&amp;rdquo; when enabling annotations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/git-archeology/blame_ignore_intellij.png&#34; alt=&#34;IntelliJ Ignoring Changes&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;recap&#34;&gt;Recap&lt;/h1&gt;
&lt;p&gt;Different problems require different approaches. Whether you&amp;rsquo;re looking for an error message that is long gone from the &lt;code&gt;main&lt;/code&gt; branch or try to peel back the layers for some new code, git offers a tremendous amount of tools for your needs. Sometimes it is enough to remember that certain tools or approaches exist so you can look them up if you decide which way you want to approach your search:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git blame&lt;/code&gt; with its various filters like &lt;code&gt;-M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -S/-G&lt;/code&gt; to look for additions/deletions for specific keywords or patterns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git blame --ignore-rev&lt;/code&gt; to hide known, noisy commits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope I was able to show the one or other interesting bit that can you add to your own toolbox and would be happy &lt;a href=&#34;https://twitter.com/bmuskalla&#34;&gt;to hear about&lt;/a&gt; your approach to software archeology.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Syntax Puzzlers</title>
      <link>https://bmuskalla.github.io/blog/2021-01-04-java-syntax-puzzle/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2021-01-04-java-syntax-puzzle/</guid>
      <description>&lt;p&gt;Roughly 12 years ago, I started to contribute to the Eclipse ecosystem in various functions. One of the most interesting experiences to this date was to work on developer tooling and handling the edge cases so others don’t have to struggle. Though I stepped down as an Eclipse committer in the meantime, I’m still attached to working on productivity tooling nowadays as a member of the &lt;a href=&#34;https://github.com/gradle/gradle&#34;&gt;Gradle Build Tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While working on Eclipse, I fondly remember working on various parts of the Java Tooling (JDT) and while working on refactorings and quick fixes. And not surprisingly, working on language-intensive pieces turned out to have the same hiccups as other non-trivial algorithsm - the transition from “this is gonna be easy” to “why am I up at 3am reading the Java Language Specification”.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Opening a bug report with snippet to reproduce: 10min. Working on a patch: 2h. Getting pinged whether you can finish that patch, 11 years later: priceless. I do miss working on &lt;a href=&#34;https://twitter.com/hashtag/eclipse?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#eclipse&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/jdt?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#jdt&lt;/a&gt; though &lt;a href=&#34;https://t.co/vpLD73zOlC&#34;&gt;https://t.co/vpLD73zOlC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Muskalla (@bmuskalla) &lt;a href=&#34;https://twitter.com/bmuskalla/status/1110923346441588737?ref_src=twsrc%5Etfw&#34;&gt;March 27, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Working on language-specific tooling exposes you to all kinds of edge cases and delicate details and language has to offer. Some of them are well known and generally seen &amp;ldquo;unprofession&amp;rdquo; (hello &lt;code&gt;goto&lt;/code&gt;). Others are actually not know at all. And with all due respect, I quite enjoy discovering the edge cases of the language syntax - a lot of times to confuse my co-workers who think they know the Java Language Syntax ;) And given I love a good puzzle (especially the Java Puzzles), let’s try a puzzle but using the Java syntax only, without any untime behaviour.&lt;/p&gt;
&lt;h3 id=&#34;using-java-for-phishing&#34;&gt;Using Java for Phishing&lt;/h3&gt;
&lt;p&gt;Let us start off with a widely known fact about Java source files. You’re allowed to use Unicode in most places of your code. While we can’t use the full range of &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.8&#34;&gt;unicode in your class names&lt;/a&gt; (I still want to write &lt;code&gt;throw 🎂()&lt;/code&gt;), you can add enough unicode to play some pranks on your co-workers.&lt;/p&gt;
&lt;p&gt;As an appetizer, in your next (remote) pairing session, just slip in a “Greek Question Mark” (&lt;code&gt;U+037E&lt;/code&gt;)  into the code and watch your co-worker trying to find out what is wrong with that simple semicolon. This technique is most often used by phishing emails to make a url look like the real one but actually points &lt;a href=&#34;https://en.wikipedia.org/wiki/IDN_homograph_attack&#34;&gt;to a very different domain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/syntax-puzzle/semicolon.png&#34; alt=&#34;Greek Question Mark&#34;&gt;&lt;/p&gt;
&lt;p&gt;As it doesn’t even compile, that’s an easy one for your co-worker to recognize and fix. Let’s start to be a little more sneaky.&lt;/p&gt;
&lt;p&gt;Guess what the following program prints?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// one down, one to go: \u000a\u007d\u007b
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 is 2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes, in the context of the post, you correctly guessed that it is printing “1 is 2”. Just&amp;hellip;HOW? How is it possible to trick Java into thinking 1 == 2, even with unicode magic. INSIDE A COMMENT. Any guesses? It actually doesn’t change the expression. The following unicode characters were harmed in the process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\u000a&lt;/code&gt; - the newline character &lt;code&gt;\n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u007d&lt;/code&gt; - a closing curly brace &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u007b&lt;/code&gt; - an opening curly brace &lt;code&gt;{&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the code we’re actually looking at is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 is 2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Funny enough, most programmers would suspect something fishy with this comment when they see it. But what about indenting it so it’s not shown in your editor anymore? ;)&lt;/p&gt;
&lt;h3 id=&#34;blocks-of-blocks&#34;&gt;Blocks of Blocks&lt;/h3&gt;
&lt;p&gt;Let’s move on to the &lt;a href=&#34;https://docs.oracle.com/javase/specs/&#34;&gt;Java Language Specification&lt;/a&gt; and see what interesting bits of syntax we can find in there.&lt;/p&gt;
&lt;p&gt;Looking at the possibilities we have for implementing methods, Java defines method bodys to contain &lt;code&gt;Block&lt;/code&gt; elements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MethodBody:
  Block

Block:
  { [BlockStatements] }

BlockStatement:
  LocalVariableDeclarationStatement
  ClassDeclaration
  Statement

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Taking a closer look at the definition of &lt;code&gt;Block&lt;/code&gt;, we learn that they can contain statements (so far so good) but also…&lt;code&gt;ClassDeclaration&lt;/code&gt;s. Now it gets interesting. Let’s see how deep the rabbit hole goes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;howDeepCanWeGo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helloFromBar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;// You musn&amp;#39;t be afraid to dream a little bigger, darling.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bar&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;helloFromBar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Foo instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Funnily enough, while this feature seems quite useless at first sight, it’s the only one I’ve been using in actual test code in the past. While working on a framework that heavily relied on reflection, the inline class definitions came in quite handy to define classes under test and keeping them with the test. The alternative of having a bunch of nested classes scattered alongside tests was a good reason to move them closer to the test. You can read me more about the quicks of local classes in &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se15/html/jls-14.html#jls-14.3&#34;&gt;JLS 14.3&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;this-and-that&#34;&gt;This and That&lt;/h3&gt;
&lt;p&gt;Moving away from classes and closer to the action. Let’s have a look at method parameters. As you may encounter several times yourself, you can’t name things the same as keywords. Well, let’s have a look at the following snippet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeywordParameter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        KeywordParameter someObject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; KeywordParameter&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        someObject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;callMe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callMe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KeywordParameter &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; foo&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we’re creating a new instance of &lt;code&gt;KeywordParameter&lt;/code&gt; and calling the &lt;code&gt;callMe&lt;/code&gt; method on it. Passing the &lt;code&gt;int&lt;/code&gt; parameter. But wait, the method has two parameters. And one is even named after a keyword. That shouldn’t even compile right? It actually does. Looking at the JLS 8.4 Method Declarations, we can find the definition for method declarations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MethodDeclarator:
  Identifier ( [ReceiverParameter ,] [FormalParameterList] ) [Dims]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that the first parameter is a special, optional parameter not part of the formal parameter list. And it’s actually defined to always have the name “this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReceiverParameter:
  {Annotation} UnannType [Identifier .] this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The so called “receiver parameter” is a “optional syntactic device” that represents the object it is invoked on (so it’s really the same as what you’d expect from “this”). It’s sole purpose is to be available in the source code to be annotated if necessary. Let’s assume we have an &lt;code&gt;@Immutable&lt;/code&gt; annotation in our project and for some reason, we want to ensure that our IDE (or other code analyzers) understand tat &lt;code&gt;this&lt;/code&gt; in our current context represents an immutable data structure. With the explicit receiver parameter, we can annotate it correspondingly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callMe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Immutable&lt;/span&gt; KeywordParameter &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; foo&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;everywhere&#34;&gt;@Everywhere&lt;/h3&gt;
&lt;p&gt;Talking about annotating things for the purposes of analyzing code. For the above snippets to work, the annotation needs to be targetable for &lt;code&gt;PARAMETER&lt;/code&gt;. Did you ever look up what other targets an annotation can have? Going through the most common ones, there are no surprises:
&lt;code&gt;TYPE&lt;/code&gt;, &lt;code&gt;FIELD&lt;/code&gt;, &lt;code&gt;METHOD&lt;/code&gt;, &lt;code&gt;PARAMETER&lt;/code&gt;, &lt;code&gt;CONSTRUCTOR&lt;/code&gt;, &lt;code&gt;LOCAL_VARIABLE&lt;/code&gt;, &lt;code&gt;ANNOTATION_TYPE&lt;/code&gt;, &lt;code&gt;PACKAGE&lt;/code&gt;, &lt;code&gt;TYPE_PARAMETER&lt;/code&gt;, &lt;code&gt;MODULE&lt;/code&gt; (since Java 9) and &lt;code&gt;RECORD_COMPONENT&lt;/code&gt; (since Java 14). But there is one that’s not so obvious where to put it: &lt;code&gt;TYPE_USE&lt;/code&gt;. From the name, it sounds like it can be used everywhere a type is used. Let’s try and use it in some places:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@TypeAnnotationsEverywhere.Immutable&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// ok, easy, similar to TYPE 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeAnnotationsEverywhere&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;giveMeMoreTypes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Immutable&lt;/span&gt; RuntimeException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// errr what?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     Object foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Immutable&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// WHAT??????
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Immutable&lt;/span&gt; Function &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Indeed, using &lt;code&gt;TYPE_USE&lt;/code&gt; allows us to put the annotation in the most unusual spots. &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.11&#34;&gt;JLS 4.11&lt;/a&gt; defines all the spots that are covered by a “type usage”.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Which one of those syntaxes were you aware of? Got all of them? The code for the post can be found on &lt;a href=&#34;https://github.com/bmuskalla/java-syntax-puzzlers&#34;&gt;GitHub&lt;/a&gt; as well. In the meantime, I’m still working on my museum of interesting cases of the language constructs, so please share anything you’ve encountered yourself. You can reach me on Twitter via &lt;a href=&#34;https://twitter.com/bmuskalla&#34;&gt;@bmuskalla&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JIT 101</title>
      <link>https://bmuskalla.github.io/blog/2020-05-28-jit-101/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2020-05-28-jit-101/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;JIT compilation and HotSpot are with no doubt some very complex topics. This blog is very short article touching on
the topic in question; it was originally intended
to be included in &lt;a href=&#34;http://shop.oreilly.com/product/0636920048824.do&#34;&gt;97 Things Every Java Programmer Should Know&lt;/a&gt;.
Contributions for the book had a limit on its length, thus a very short
introduction into the HotSpot JIT. In the end, the book authors choose another
piece of mine to be included but I thought it this might be interesting
for the one or other person out there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compared to other compilers, &lt;code&gt;javac&lt;/code&gt; avoids a lot of optimizations when compiling java source code to bytecode. While “Ahead-Of-Time” (AOT) compilation
can do more heavyweight analysis of the source code, a dynamic compiler can take into account runtime statistics like the most used paths (hotspots)
and advanced chipset features (e.g. which CPU instruction sets are available).
&lt;br&gt;
&lt;br&gt;
Enter the “Just-In-Time” (JIT) compiler. That means over time, the behaviour what and how to compile bytecode to native code changes. Initially, most
bytecode is actually just interpreted (tier 0) which is rather slow. Once a code path is “hot” enough, C1 compiler kicks in (most of us know this by
the &lt;code&gt;-client&lt;/code&gt; flag). It is not as aggressive and allows for a faster initial startup. The C2 compiler (&lt;code&gt;-server&lt;/code&gt;) uses more comprehensive analysis and is
meant for long running processes. Since Java 7, the JVM uses a compilation mode called tiered compilation which seamlessly switches between the modes
based on application behavior.
&lt;br&gt;
&lt;br&gt;
Initially, the compilers insert profiling probes into the bytecode to determine which code paths are the hottest (e.g. by invocation count), invariants
(which types are actually used) and branch prediction. Once enough analytics are collected, the compilers actually start to compile bytecode to native
code once they are “hot enough” (&lt;code&gt;-XX:CompileThreshold&lt;/code&gt;), replacing the existing byte code step by step (mixed mode execution).
&lt;br&gt;
&lt;br&gt;
Starting with the hot path, one of the first things the compiler tries to achieve is constant folding. Using partial evaluation and escape analysis,
the compiler will try to determine if certain constructs can be reduced to constants (e.g. the expression &lt;code&gt;3 * 5&lt;/code&gt; can be replaced with &lt;code&gt;15&lt;/code&gt;). Another
rather simple optimization is to avoid method calls by inlining methods into their call sites (if they are small enough).
&lt;br&gt;
&lt;br&gt;
Virtual method calls present a more complex problem. Generally, the best case is a monomorphic call, a method call that can be translated to a direct
jump in assembly. Compare that to polymorphic calls, like an instance method whose type is not known in advance. The type invariants collected previously
by the probes can help tremendously to identify which types are most often encountered within a code path.
&lt;br&gt;
&lt;br&gt;
The compiler optimizes aggressively using heuristics as well. In case a guess was actually wrong (e.g. the seemingly unused branch was called at some
point), the compiler will deoptimize the code again and may revisit this path later using more profiling data.
&lt;br&gt;
&lt;br&gt;
Depending on the architecture the JVM is running on, the bytecode may not even be used at all. The HotSpot JVM uses a concept called &amp;ldquo;intrinsics&amp;rdquo;
which is a list of well known methods that will be replaced with specific assembler instructions known to be fast. Good examples are the methods in
&lt;code&gt;java.lang.Math&lt;/code&gt;, &lt;code&gt;System#arraycopy&lt;/code&gt; or &lt;code&gt;Object#getClass&lt;/code&gt; (see &lt;code&gt;@HotSpotIntrinsicCandidate&lt;/code&gt;).
&lt;br&gt;
&lt;br&gt;
Multi-threaded applications may as well benefit from the optimizations the JIT can do with synchronization locks. Depending on the locks used, the
compiler may merge &lt;code&gt;synchronized&lt;/code&gt; blocks together (Lock Coarsening) or even remove them completely if escape analysis determines that nobody else
can lock on those objects (Lock Elision).
&lt;br&gt;
&lt;br&gt;
You can enable a lot of debug information about how the compiler decides what to do with your code using the feature flags like
&lt;code&gt;-XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining&lt;/code&gt;. If you want to dive deeper into the world of the Hotspot JIT Compiler, have a look at &lt;a href=&#34;https://github.com/AdoptOpenJDK/jitwatch&#34;&gt;JITWatch&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
To have a real deep-dive into such topics, I can highly recommend &lt;a href=&#34;https://shipilev.net/&#34;&gt;the posts by Aleksey Shipilëv&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Changing System Properties in Isolation</title>
      <link>https://bmuskalla.github.io/blog/2019-11-25-release-scoped-properies/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2019-11-25-release-scoped-properies/</guid>
      <description>&lt;p&gt;So the other day I was working with a 3rd party library which used &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html&#34;&gt;System properties&lt;/a&gt; as their feature flags.
So before calling anything in that library, you&amp;rsquo;d have to setup the proper system properties.
While some of them were specific to the library, the library also did depend on some generally useful system properties (e.g. &lt;code&gt;user.home&lt;/code&gt; to write settings).&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;br&gt;
Now, most engineers would nice encapsulate this behind a &lt;a href=&#34;https://en.wikipedia.org/wiki/Facade_pattern&#34;&gt;Facade&lt;/a&gt; and use a &lt;code&gt;try/finally&lt;/code&gt; to manage the system properties, something along the lines of this snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String oldValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someSystemProp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someSystemProp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customValue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ... call into 3rd party library
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someSystemProp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; oldValue&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While this is neat and gets the job done, it only solves the problem in a very limited way. Given the global nature of system properties, any other thread running in parallel will now see the &lt;code&gt;customValue&lt;/code&gt; as there is no isolation between this code and the rest of the system. Even worse, someone else might change the value of one of the properties while we&amp;rsquo;re calling the 3rd party library. Assuming you can control all places that use those system properties, you could introduce a lock and ensure every calling code goes through that. While that works, it has the downside of having an exclusive blocking behavior as you can never run any code dealing with the 3rd party dependency yourself.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;br&gt;
&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://github.com/bmuskalla/scoped-system-properties&#34;&gt;Scoped System Properties&lt;/a&gt; to the rescue.&lt;/em&gt;
&lt;br&gt;
Scoped system properties solves the dilemma mentioned above by providing an isolated environment for system properties to be read and written without any other part of your application to see it. While this is what you&amp;rsquo;d already get by refactoring towards a better abstraction, &lt;a href=&#34;https://github.com/bmuskalla/scoped-system-properties&#34;&gt;Scoped System Properties&lt;/a&gt; hides this behind the regular system property API (&lt;code&gt;System.getProperty(key)&lt;/code&gt;, &lt;code&gt;System.setProperty(key, value)&lt;/code&gt;, &amp;hellip;).&lt;/p&gt;
&lt;p&gt;This allows 3rd party code to run unmodified while we can provide proper isolation of said system properties. Lets take the example from above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someKey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;global value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PropertyEnvironment env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ScopedSystemProperties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newPropertyEnvironment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someKey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scopedValue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// or using the usual Java APIs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someKey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scopedValue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someKey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; &amp;#34;scopedValue&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// another thread calling System.getProperty(&amp;#34;someKey&amp;#34;) =&amp;gt; global value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someKey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// =&amp;gt; &amp;#34;global value&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above, we used &lt;code&gt;scoped-system-properties&lt;/code&gt; (available via maven central) in our regular production code.
In case you need system property isolation in unit tests, you can also use &lt;code&gt;scoped-system-properties-junit&lt;/code&gt;.
The JUnit 5 extension offers &lt;code&gt;@IsolatedSystemProperties&lt;/code&gt; to setup and teardown the property environment before/after the test. This allows running tests in parallel without an exclusive lock being present. &lt;br&gt;
&lt;br&gt;
Head over to &lt;a href=&#34;https://github.com/bmuskalla/scoped-system-properties&#34;&gt;GitHub&lt;/a&gt; to find the Maven/Gradle coordinates, find more documentation or report any issues you find.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I&amp;rsquo;m talking here about a library that is outside of our control. If we do control the library, I highly suggest to refactor it away from globals like system properties by injecting any configuration from the outside.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;But to be fair, depending on your use case, this might already be enough. If you happen to have such a problem in your tests, have a look at JUnits &lt;a href=&#34;https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/parallel/ResourceLock.html&#34;&gt;@ResourceLock&lt;/a&gt; (see &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution-synchronization&#34;&gt;Synchronization when running Parallel Tests&lt;/a&gt;). While this has the same effect of avoiding race conditions on the system properties, such tests cannot be run in parallel if they require mutating access to system properties.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Manually deleting a package from GitHub Package Registry</title>
      <link>https://bmuskalla.github.io/blog/2019-11-01-delete-github-package/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2019-11-01-delete-github-package/</guid>
      <description>&lt;p&gt;You were so excited about the new &lt;a href=&#34;https://help.github.com/en/github/managing-packages-with-github-package-registry/about-github-package-registry&#34;&gt;Package Registry&lt;/a&gt; that you immediately
added it to your build and published your first package. Unfortunately,
it is the time when you realize you had a typo in the name or the group id of your package.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s quickly delete the package and publish again. But not with GitHub. While the documentation
states that deleting packages may be possible, it&amp;rsquo;s not easily available. You can either go
through GitHub Support or use the GraphQL API. How to do the latter is something I tried and
thought it would be useful to document here for others.&lt;/p&gt;
&lt;p&gt;First off, we need to find the internal ids for the packages we want to delete. The easiest way to access
data on GitHub using the GitHub GraphQL API is GitHubs &lt;a href=&#34;https://developer.github.com/v4/explorer/&#34;&gt;GraphQL API Explorer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using the following GraphQL query we can find the packages currently available in our repository. Note that you need to change &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt; to match the package you want to find. In case you have a lot of packages, you may need to adapt the &lt;code&gt;first&lt;/code&gt; filter as well. In order for this to work, you need to ensure that the token used by the API explorer does have the &lt;code&gt;[&#39;read:packages&#39;]&lt;/code&gt; scope.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gql&#34; data-lang=&#34;gql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;repository&lt;/span&gt;(owner:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bmuskalla&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;package-test&amp;#34;&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;registryPackages&lt;/span&gt;(first:&lt;span style=&#34;color:#a6e22e&#34;&gt;10&lt;/span&gt;){
      nodes {
        nameWithOwner
        packageType
        version(version:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;){
          &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My current packages in that project I used for testing look like in the following screenshot. We have 2 packages using the &lt;code&gt;maven&lt;/code&gt; package type.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/pkg-graphql/graphql_packages_red.png&#34; alt=&#34;GitHub Packages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;query&lt;/code&gt; above, you should see a a response similar to the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;registryPackages&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nodes&amp;#34;&lt;/span&gt;: [
          {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nameWithOwner&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bmuskalla/oopsi&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;packageType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MAVEN&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
          },
          {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nameWithOwner&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bmuskalla/oopsi.package-test&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;packageType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MAVEN&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: {
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MDE0OlBhY3thZ2VWZXJzaW9uMjMzMDUx&amp;#34;&lt;/span&gt;
            }
          }
        ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above we can see the internal ids for each individual package (careful to use the version id).
Using this identifier, we can come up with the right &lt;code&gt;deletePackageVersion&lt;/code&gt; &lt;code&gt;mutation&lt;/code&gt; to delete the package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gql&#34; data-lang=&#34;gql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mutation&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;deletePackageVersion&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;:{&lt;span style=&#34;color:#a6e22e&#34;&gt;packageVersionId&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MDE0OlBhY3thZ2VWZXJzaW9uMjMxNDMw&amp;#34;&lt;/span&gt;}) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given the GitHub GraphQL API Explorer does not allow &lt;code&gt;mutation&lt;/code&gt; requests out-of-the-box, you need to resort to the console or your GraphQL tool of choice. Personally, I use the &lt;a href=&#34;https://github.com/imolorhe/altair&#34;&gt;Altair GraphQL client&lt;/a&gt;.
Using that, you need to setup the proper token for authenticating against the GitHub API using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Authorization: bearer &amp;lt;YOURTOKEN&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And to enable the developer preview for the API we&amp;rsquo;re using, you need to use the &lt;code&gt;Accept&lt;/code&gt; header:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Accept: application/vnd.github.package-deletes-preview+json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If all worked out, you should get a confirmation that the package version got deleted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gql&#34; data-lang=&#34;gql&#34;&gt;{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deletePackageVersion&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If there is nothing left in the package, it should be gone from the UI as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/pkg-graphql/packages_after.png&#34; alt=&#34;GitHub Packages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Happy Packaging!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Log4j 2 - The Ghost in the logging framework</title>
      <link>https://bmuskalla.github.io/blog/2019-10-02-log4j2-ghost-logging-framework/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2019-10-02-log4j2-ghost-logging-framework/</guid>
      <description>&lt;p&gt;It was exactly one day after my vacation. Started to get back into the groove, had a quick chat with my fellow engineer Holger. He casually mentioned that he found a really confusing test failure the other day that we should pair up on. Ready to start digging into some code again, he gave me the broad picture:&lt;/p&gt;
&lt;p&gt;Internally we use &lt;a href=&#34;https://logging.apache.org/log4j/2.x/&#34;&gt;Log4j2&lt;/a&gt; as our logging solution of choice (with the various off-the-shelf adapters to handle 3rd libraries with different log frameworks). An interesting aspect about our internal test infrastructure is that we do capture all trace logs during test runs (including http requests, headers, generated test data, etc) but only for the lifetime of a test run. If a test passes, we ignore the logs. If the test fails (or is a flake), we’ll actually send the log to the next appender that is configured (usually a &lt;code&gt;Console&lt;/code&gt; or &lt;code&gt;RollingFileAppender&lt;/code&gt;)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;One test started failing rather consistently after we recently changed some of our logging infrastructure and configuration.&lt;/p&gt;
&lt;p&gt;That test was using one of our components to connect to a server, post some data, retrieve the data and assert the new data is present. In other words, it was doing some HTTP requests, parsed the data and asserted on that. This represents a rather boring yet important end-to-end test. We run a lot of similar tests against a myriad of server and even more versions of aforementioned. Under regular circumstances the test passed. The fun part started when running the test with trace logging enabled. Enabling trace logging, the tests started to fail pretty consistently &amp;hellip; With a &lt;code&gt;NoHttpResponseException&lt;/code&gt;&amp;hellip;And always the same URI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/ghost-log4j/short-neck-reaction-guy.png&#34; alt=&#34;What?&#34;&gt;&lt;/p&gt;
&lt;p&gt;After Holger briefly described the situation, it was pretty clear to me that my coding skills are still on vacation as this analysis made absolutely no sense. Even worse, one approach to “fix it” was to limit the size of the logs to a few kilobytes (don’t ask how we got to that point). That made the test pass and the HTTP request to succeed.&lt;/p&gt;
&lt;p&gt;At that point, it had to be something that is logged which is causing the problems. Maybe some encoding issue? Are we somehow hitting some edge case with certain unicode characters coming from the server?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It wouldn’t be the first time this happens to us; years back, we had fun working with an API that stalled the server for 2-3 minutes if you used any unicode character in your requests - but that’s a story for another day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the knowledge that it had something to do with how large the logs are, we started digging deeper. To better isolate the problem and reduce the number of things that could possibly contribute to this, we ran the tests again and piped all requests into separate files. This allowed us to try and replay the scenario to see if those requests (which were quite large) had anything specific to them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ du -sh *.log | sort
2.0M	request-11.log
2.0M	request-8.log
384K	request-10.log
384K	request-12.log
384K	request-3.log
384K	request-7.log
496K	request-1.log
496K	request-13.log
496K	request-2.log
496K	request-4.log
496K	request-5.log
496K	request-6.log
496K	request-9.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interesting enough, we have some outliers here with 2MB for each response from the server. Taking a closer look reveals that these are mostly XML documents (or SOAP envelopes to be specific). While 2 megabytes is a lot of bandwidth, it’s not too uncommon for SOAP-based web services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;soapenv:Envelope&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:soapenv=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xsd=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;queryWorkItemsResponse&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ns4:queryWorkItemsReturn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uri=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subterra:data-service:objects:/default/ABC${WorkItem}ABC-22908&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unresolvable=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While digging into these things, we had one related observation. The tests in question, while usually taking some time to run, actually took a &lt;em&gt;lot&lt;/em&gt; longer when running with trace logging enabled (and failed). It’s not that trace logging comes for free but Log4j2 (like most other logging frameworks noways) is designed to be extremely fast and even &lt;a href=&#34;https://logging.apache.org/log4j/2.x/manual/garbagefree.html&#34;&gt;garbage-free&lt;/a&gt;.
Just to put out suspicion to rest, let’s write a very simple test case. Take the responses that we just captured and log them (to simulate what we do in our real scenario).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reproducer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Logger logger &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LogManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLogger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reproducer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logCapturedServerResponse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		File logFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...;&lt;/span&gt;
		String log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;logFile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Charsets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using a 2MB http response file from above, this test runs for &lt;strong&gt;50s&lt;/strong&gt; on a decent MacBook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/ghost-log4j/long-neck-reaction.jpg&#34; alt=&#34;Whaaaaaat?&#34;&gt;&lt;/p&gt;
&lt;p&gt;Time to start &lt;a href=&#34;https://www.yourkit.com&#34;&gt;Yourkit&lt;/a&gt; and figure out what exactly is taking us 50s to log a large string. Running the test using the profiler reveals something very interesting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bmuskalla.github.io/blog/ghost-log4j/yourkit.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/ghost-log4j/yourkit.png&#34; alt=&#34;Whaaaaaat?&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Log4j2 is performing &lt;em&gt;a lot&lt;/em&gt; of string substitutions for the pattern layout used by the logs. That is&amp;hellip;surprising. While we use a little bit of a more verbose format, it’s nothing too controversial.
The pattern we use is &lt;code&gt;%c{3} - %m%n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As stated on the &lt;a href=&#34;https://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout&#34;&gt;Layouts documentation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%c - Outputs the name of the logger that published the logging event.&lt;/li&gt;
&lt;li&gt;%m - Outputs the application supplied message associated with the logging event.&lt;/li&gt;
&lt;li&gt;%n - Outputs the platform dependent line separator character or characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: There are some placeholders that actually do require expensive operations (e.g. %M to log the method name of the callee) but none of the was used in this. See &lt;a href=&#34;https://logging.apache.org/log4j/2.x/manual/layouts.html#LocationInformation&#34;&gt;Location information&lt;/a&gt; to learn about those patterns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have established that our pattern for logging is quite trivial. We even tried using just &lt;code&gt;%m&lt;/code&gt; with no resolution, the test still took about 1 minute to run. While digging into the offending &lt;code&gt;StrSubstitutor&lt;/code&gt; class (which is just a fork of the commons-lang &lt;code&gt;StrSubstitutor&lt;/code&gt;), there was an interesting bit that caught our eye in the JavaDoc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Variable replacement works in a recursive way. Thus, if a variable value contains a variable then that variable will also be replaced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Huh. Could it be that the responses from the server may actually contain something that log4j2 would recognize as a variable? A quick look at the response gives us the shocking answer. Not only once or twice but some of those SOAP responses contain more than 3000 occurrences of &lt;code&gt;${Project}&lt;/code&gt; or &lt;code&gt;${WorkItem}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ns8:queryWorkItemsReturn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uri=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subterra:data-service:objects:/default/ABC${WorkItem}ABC-22904&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unresolvable=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This provoked log4j2 to parse the 2MB responses and replace the “variables” which in turn led to the server closing the connection on us in between.&lt;/p&gt;
&lt;p&gt;To be honest, while you can argue about the format and use case, this API decided to use this format represent certain URIs. That Log4j2 is trying to actually interpret the placeholders in values passed in is the (at least to us) the surprising part.&lt;/p&gt;
&lt;p&gt;Good for us, log4j2 already provides a flag on the &lt;code&gt;%m&lt;/code&gt; placeholder to disable recursive variable substitution. From their documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Outputs the application supplied message associated with the logging event.
Use {nolookups} to log messages like &amp;ldquo;${date:YYYY-MM-dd}&amp;rdquo; without using any lookups. Normally calling logger.info(&amp;ldquo;Try ${date:YYYY-MM-dd}&amp;quot;) would replace the date template ${date:YYYY-MM-dd} with an actual date. Using nolookups disables this feature and logs the message string untouched.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the pattern &lt;code&gt;$m{nolookups}%n&lt;/code&gt; now only takes half a second to trace log the message.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Having recursive lookups enabled by default is an interesting choice as it may start to slow down your performance unnecessarily if you don’t make use of this feature. But more importantly, this is something to watch out for when it comes to &lt;a href=&#34;https://www.owasp.org/index.php/Log_Injection&#34;&gt;log forgery/log injection&lt;/a&gt; depending on how you consume the log files. Let me know if you experienced similar behaviors and how you worked those out.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Let me know in the comments if you’d like to see this being open-sourced.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Refactoring towards speed reading</title>
      <link>https://bmuskalla.github.io/blog/2018-06-08-refactoring-towards-speed-reading/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2018-06-08-refactoring-towards-speed-reading/</guid>
      <description>&lt;p&gt;When was the last time you were in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_(psychology)&#34;&gt;flow&lt;/a&gt;
while working through some code? Reading code or doing code reviews is an activity
that we do often, yet we don’t often get into the zone doing it. Too many times, we
have to slow down, check that last line again or try to figure out the structure of
the code. Even though we all follow the same principles for clean code, there is
always that gut feel which tells you that one style is better than the other. While
not conclusive, a part of this is the way we structure code for readability.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://unsplash.com/photos/FrGYMDjdg4U&#34;&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1506782664677-3e16d3382641?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=600&amp;amp;q=80&#34; alt=&#34;Photo by Fischer Twins on Unsplash&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Speed_reading&#34;&gt;Speed reading&lt;/a&gt; is a technique many people
have heard about. The casual reader usually reaches 150–200wpm
(&lt;a href=&#34;https://en.wikipedia.org/wiki/Words_per_minute&#34;&gt;words per minute&lt;/a&gt;) with a
good comprehension rate. Auditory readers can read approximatly 400wpm while
visual readers can reach up to 700wpm. Controversial world record holders in
speed reading claim to reach up to 4200wpm. But don’t worry, we don’t need
to set the new world record in speed reading to learn the basic concepts
and apply them to another area: our code. We’ll look at 3 areas that are
particular helpful when it comes to reading code: Skimming, meta guiding
and visual fixation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/speedfactoring/sentence_400wpm.gif&#34; alt=&#34;Simple sentence @ 400wpm&#34;&gt;&lt;/p&gt;
&lt;p&gt;So what makes speed reading that fast? One of the first steps is to
suppress subvocalication. Subvocalization? Exactly. That voice in your head
that just tried to properly articulate that word. And yes, you’re now aware of
that voice again. But don’t worry, it will be gone soon :) Subvocalization
is something that an adult should be able to learn with relative ease as a
first step to seriously improve reading speed, not only for code.&lt;/p&gt;
&lt;p&gt;In this post, I’m not going into the details of learning to speed read as others
do a way better job at that. Be it books, articles or software like
&lt;a href=&#34;https://www.spreeder.com/cx/&#34;&gt;spreeder&lt;/a&gt; or &lt;a href=&#34;http://spritzinc.com/&#34;&gt;spritz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lets get to our first example that we want to refactor to improve readability.
Here is a simple function which takes 3 parameters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/speedfactoring/example_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I suspect it is not the first time for you reading code so I can safely
assume that you didn’t even try to read it word by word. The first thing
that happens when trying to read this code is that we try to skim over
it and find the relevant bits of what is happening based our previous
expierence. One likely way to read the code is to follow where and how the
input parameters are used. Using
&lt;a href=&#34;https://en.wikipedia.org/wiki/Eye_movement_in_reading&#34;&gt;eye tracking&lt;/a&gt;, what
was likely happening when you read the code is this eye movement:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/speedfactoring/example_2.png&#34; alt=&#34;Eye movement when tracking the parameter usage&#34;&gt;&lt;/p&gt;
&lt;p&gt;After locating name, we actually have to break our visual fixation and find
the next parameter which requires us to look down and left. We can start
with a very simple refactoring to help a bit with this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/speedfactoring/example_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Better. But we’re not there yet. Looking at the semantic meaning of the
three lines of code here suggests that they’re in fact not too different.
We do validate all three arguments, not just age as the method name suggests.
While many people these days strive for clean code, the trigger to extract
a method is usually the number of lines that can be extracted. By extracting
methods for these cases even helps us to guide the eye, allowing future
engineers to actually skim over the code and let them decide whether they
need to stop here or actually go on depending on what they’re looking for.&lt;/p&gt;
&lt;p&gt;By the way, were you able to read the animated sentence in orange above?
That was 400wpm. That is already very fast. The fact that we can rely on
visual fixation to avoid additional eye movement helps us to keep up.
If you’re not used to this reading speed, comprehension usually suffers
when reading a longer text in that speed. You can usually try it with
speed reading apps, &lt;a href=&#34;https://chrome.google.com/webstore/detail/sprint-reader-speed-readi/kejhpkmainjkpiablnfdppneidnkhdif?hl=en&#34;&gt;browser extensions&lt;/a&gt; or this &lt;a href=&#34;https://www.spreeder.com/bookmarklet.php&#34;&gt;bookmarklet&lt;/a&gt;
if you’re curious.&lt;/p&gt;
&lt;p&gt;Meta guiding is another principle in speed reading that is commonly
suggested when starting to learn speed reading. Instead of trying to
read word by word in a book, you try to capture the whole line at once.
Kids usually do that by using their finger to keep track of the word
they’re reading. As adults, we usually stopped doing that at some point.
But using a finger or another device helps us to keep moving forward
and avoids jumping back a word or two. Funny enough, code itself can
act as such a device as it has an inherit structure that we can
leverage to guide our eye.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/speedfactoring/example_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;How many items are in the list? One, two, three, four! Five. Maybe more.
Oops, missed that zeros argument, too?. The structure that should actually
help us gets in our way. While we have allowed our “reader” to be guided
by the alignment of the add methods, we totally misguided the eye and
missed the constructor argument. Rewriting this to match the pattern
of the other add calls allows the reader to follow the guide easily
without missing any important information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/speedfactoring/example_5.png&#34; alt=&#34;Help guiding the eye of your reader&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now all the methods that actually add something to the list are in
line and easy to spot without looking back and forth.&lt;/p&gt;
&lt;p&gt;What are your code snippets that you broke your flow of reading in
the past? Because most of the time, parsing the code with our eyes
is what we do. The trick is not to become a better parser or a better
reader. The goal should be to write our code in a way that it helps
guide the reader towards the important aspects of the code. A
reader needs to be able to skim over the code, ignore the boilerplate
that does not add to the semantic understanding and still have a
high comprehension. But in the end, it goes a long way to write
code that is not only readable but can actually be digested in a
really fast manner.&lt;/p&gt;
&lt;p&gt;Next time you write some piece of code, see if you can actually speed read it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Merging nested Lists or Arrays with Java 8</title>
      <link>https://bmuskalla.github.io/blog/2016-11-15-merging-nested-lists-or-arrays-with-java-8/</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2016-11-15-merging-nested-lists-or-arrays-with-java-8/</guid>
      <description>&lt;p&gt;When accessing 3rd party APIs with pagination, we tend to see the same pattern
over and over again. Usually, a response (represented as POJO) looks something
like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Item&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getItems&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be it from a third party service or your own APIs, after retrieving all results
of the API call, we end up with something like a &lt;code&gt;List&amp;lt;Result&amp;gt;&lt;/code&gt;. Great. We don’t
really care about the response itself, we’re actually interested in all the
items of the responses. Let’s say we want all the items, filter some of them out
and transform them into a &lt;code&gt;TransformedItem&lt;/code&gt;. People usually start writing
something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TransformedItem&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; newItems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItems&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;item &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isValid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TransformedItem&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;toList&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ooops, this doesn’t even compile. The problem is that the first map doesn’t
return a &lt;code&gt;Stream&amp;lt;Item&amp;gt;&lt;/code&gt; but actually a &lt;code&gt;Stream&amp;lt;List&amp;lt;Item&amp;gt;&amp;gt;&lt;/code&gt;. In order to
actually merge/flatten all those nested lists, you can use &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&#34;&gt;Stream#flatMap&lt;/a&gt;.
The difference is quite simple. &lt;code&gt;#map&lt;/code&gt; allows you to transform an element in
the stream into another element. On the other hand, &lt;code&gt;#flatMap&lt;/code&gt; allows you to
convert a single element to many (or no) elements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TransformedItem&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; newItems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItems&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;flatMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TransformedItem&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;toList&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just in case you’re working with a 3rd party API that returns something ugly as &lt;code&gt;List&amp;lt;Item[]&amp;gt;&lt;/code&gt;, you can use the same pattern, just choose the corresponding the flatMap function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryResponse&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Item&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getItems&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TransformedItem&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; newItems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItems&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;flatMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TransformedItem&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;toList&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Have fun with &lt;code&gt;#flatMap&lt;/code&gt; and let me know in the comments about how you used &lt;code&gt;#flatMap&lt;/code&gt; in your scenarios. A great explanation of how to compose streams and some concepts behind streams can be found in Martin Fowler &lt;a href=&#34;http://martinfowler.com/articles/collection-pipeline/&#34;&gt;Collection Pipeline&lt;/a&gt;.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://www.tasktop.com/blog/merging-nested-lists-or-arrays-with-java-8/&#34;&gt;Tasktop Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>WHERE_TO_PUT.CONSTANTS</title>
      <link>https://bmuskalla.github.io/blog/2016-10-06-wheretoputconstants/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2016-10-06-wheretoputconstants/</guid>
      <description>&lt;p&gt;When writing software, some conversations happen over and over again. Over the years, I’ve seen different solutions to the same problem that I’d like to share with you.
One of those conversations go something like this, even though the answer might differ depending on the team or component.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bob:&lt;/strong&gt; Hey, I have some string literals here and I was told in the code review that I should extract those into constants. But where would I put those?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Alice:&lt;/strong&gt; Ah, sure. Just put them into our MyModuleConstants class. We put all constants into that class so they are easy to find.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyConstants&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String V0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String LABEL_STATUS_OPEN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String UNUSED &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;butNobodyWillKnow&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Long MAX_SIZE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 13498368L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Soooo. Constant classes, eh? Let me share some of the patterns I’ve found (and used myself) over the years and see if we can somehow adapt or improve existing patterns when and how to use constants…and when not to. Take it a bit like “Refactoring away from constants”. First things first, I’m not going to talk about constant interfaces here. Please refer to &lt;a href=&#34;https://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683&#34;&gt;Item 17: Use interfaces only to define types&lt;/a&gt; why that’s a bad idea.&lt;/p&gt;
&lt;p&gt;First up, naming constants. Easy, right? Not at all. It’s as hard as naming classes and methods to make the intention really clear. Otherwise, Bad Things™ will happen. Let’s take a look at our first constant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String V0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It seems to be defining some kind of version number. Let’s assume our project is interacting with a 3rd party API, this seems to be the version number of their REST API. Now, taking a step back, why do we extract constants in the first place? Usually, it’s for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To make the intention of a value clear (&lt;a href=&#34;https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants&#34;&gt;magic numbers&lt;/a&gt; as one example)&lt;/li&gt;
&lt;li&gt;To make the code easier to maintain by factoring out common constants so they can be easily changed in the future&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/int_pi.png&#34; alt=&#34;https://xkcd.com/1275/&#34;&gt;&lt;/p&gt;
&lt;p&gt;For the above example, the intention is not clear at all. While we can guess it’s a version string, we don’t know how it is supposed to be used. Is it so all API calls use the same version of the REST API? Or is it to determine whether we’re working with the v0 version which requires some special handling? If we now want to upgrade to v1 of the REST API, it’s not as easy as just changing the constant as other code might rely on this exact version. Without proper naming, people tend to reuse constants for different scenarios that actually require two different constructs (which might happen to have the same value for now). Assuming we had the two scenarios above, we slightly better way would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String REST_API_V0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String REST_API_CURRENT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; V0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not really great either. We still try to group out constants together using a common prefix (REST_API). Usually when you start using common prefixes, that group usually shares some kind of responsibility (see also this &lt;a href=&#34;http://www.cse.ohio-state.edu/~rountev/presto/pubs/icsm07.pdf&#34;&gt;paper&lt;/a&gt; and a &lt;a href=&#34;https://github.com/khatchad/Constants-to-Enum-Eclipse-Plugin&#34;&gt;research prototype&lt;/a&gt; for an automated refactoring). Let’s try and extract these constants out into their own entity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; RestApiVersion &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  V0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;

  V1&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String apiPath&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; RestApiVersion &lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentApiVersion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; V1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RestApiVersion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String version&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apiPath&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; version&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getApiPath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; apiPath&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think the main takeaway from this is that people tend to mix up literals and magic numbers. While everyone is trying to follow the “Extract magic numbers into constants” refactoring, they tend to see every literal as “magic number”. Be aware of the fact that constants usually have no context and thus may form cohesion where none exists. The example doesn’t cover the full story though. One nice side-effect is that we gain compile-safety by using a proper type (be it an enum or a class with the strategy pattern). While enums are usually preferred over constants, take a step back and see if there is even a need for a “list of constant things” or if a higher abstraction actually makes more sense. For example, if there is a need to dynamically influence the current version (e.g. for testing/mocking) or if there is more to handling different versions, I recommend to check out the &lt;a href=&#34;https://en.wikipedia.org/wiki/Strategy_pattern&#34;&gt;Strategy design pattern&lt;/a&gt; which I’ll leave as an exercise for the reader.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Defining constants by constants is another pattern I’ve seen quite a few times. Take the example above of the RestApiVersion. A slightly different incarnation I’ve seen many times is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; RestApiVersion &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  V0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MyConstants&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REST_VERSION_V0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// no, no, no
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;....&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This again goes back to treating every literal as a magic string. There is no additional value gained by defining &lt;code&gt;REST_VERSION_V0&lt;/code&gt; as a separate constant. The opposite is actually true. How do consumers decide when to use the proper facade like &lt;code&gt;RestApiVersion&lt;/code&gt; and when to use the “backdoor” by just using the &lt;code&gt;REST_VERSION_V0&lt;/code&gt; constant itself. With the constant exposed as a constant value, there is also no chance for the maintainer of RestApiVersion to dynamically adapt to future needs. With the whole concept modeled with a proper API, we do have a chance to change the implementation without breaking consumers.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Whenever you’re about to create a *Constants class, take a step back, go for a walk, or grab a coffee with a fellow engineer. Try to explain why you want to create such a class and if that is really the right abstraction or if the next engineers on your component might be able to see the patterns easier with another abstraction. There are a lot topics we haven’t touched on yet. When should we actually use constants? What about literals with placeholders (I look at you &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html&#34;&gt;MessageFormat&lt;/a&gt;). And are there any tools to detect unused constants? Let me know in the comments.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://www.tasktop.com/blog/where_to_put-constants/&#34;&gt;Tasktop Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Articles</title>
      <link>https://bmuskalla.github.io/articles/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>https://bmuskalla.github.io/articles/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Open Source</title>
      <link>https://bmuskalla.github.io/opensource/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>https://bmuskalla.github.io/opensource/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Talks</title>
      <link>https://bmuskalla.github.io/talks/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>https://bmuskalla.github.io/talks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vitae</title>
      <link>https://bmuskalla.github.io/vitae/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>https://bmuskalla.github.io/vitae/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Easy error reporting for your users</title>
      <link>https://bmuskalla.github.io/blog/2012-06-08-easy-error-reporting/</link>
      <pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2012-06-08-easy-error-reporting/</guid>
      <description>&lt;p&gt;While working on non-IDE products, one problem often approach us: If something goes wrong when a user is using the product, how do we actually get them to report the problems back to us? Searching for error logs on the harddrive and send them to support@&lt;insert-your-name&gt;? Actually a pretty brittle approach. From an Eclipse perspective, it’s pretty clear what to do: fire up the webbrowser, go to bugs.eclipse.org and enter a new bug report. But wait…isn’t that even more complicated? Depending on your audience, &lt;strong&gt;186&lt;/strong&gt; bugzilla products with &lt;strong&gt;2564&lt;/strong&gt; components offers a pretty good chance to file the bug against the wrong project.&lt;/p&gt;
&lt;p&gt;If your user is unable to choose the right component, you actually did a pretty good job of seamlessly integrating your plugin into Eclipse 😉 Some time ago, Mylyn introduced a little feature to actually help users with this problem. Whenever they see an exception in the Error Log, you just right-click it and select “Report as Bug”. Depending on the stacktrace of the problem, it can automatically map the exception to the right product and component in Eclipse.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/tt/Screenshot-Report-as-Bug-.png&#34; alt=&#34;Report as Bug&#34;&gt;&lt;/p&gt;
&lt;p&gt;As Mylyn provides this as a generic mechanism every project can hook into, this is an easy way to help your users and contributors to provide feedback. All you need to do is to provide the right set of mappings from your package namespace to the corresponding Bugzilla attributes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extension&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.mylyn.tasks.bugs.support&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;product&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;featureId=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;providerId=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mapping&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespace=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit.ui&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productId=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EGit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;component&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UI&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mapping&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mapping&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespace=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit.core&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productId=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EGit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;component&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Core&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mapping&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mapping&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespace=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit.mylyn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productId=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.egit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EGit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;component&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mylyn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mapping&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/tt/new_task-300x293.png&#34; alt=&#34;New Task&#34;&gt;
As you can see in the example, we define two types of mapping. The first one is the product mapping. This essentially tells Mylyn to which task repository your project belongs. As we’re using EGit in this example, we’re using the task repository definition of the Eclipse.org Bugzilla instance (see below how to create your own repository provider definition). Once we have this definition in place, the mappings define the exact products and components the bugs should be filed against. If you look at the highlighted mapping above, we’re mapping all exceptions that occurred in the “org.eclipse.egit.core” java package namespace automatically to the EGit product and set the component to Core when the user is about to create a new task. Once you’ve done this, users will automatically get the right choice of options when opening a new Bugzilla bug.&lt;/p&gt;
&lt;p&gt;So you’re not an Eclipse.org project? No problem! The same works with other task repositoryes as well which is highly interesting for products based on Eclipse or if your plugin is using a bug tracker outside the Eclipse.org infrastructure (eg. GitHub).&lt;/p&gt;
&lt;p&gt;You can always define a new provider and point to the task repository you need and the connector to use. Below you see the extension for Eclipse.org which is contributed by Mylyn.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;provider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryId=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse.mylyn.tasks.bugs.openSource&amp;#34;&lt;/span&gt;
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;description=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Eclipse open source community bug tracker&amp;#34;&lt;/span&gt;
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;icon=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;icons/branding32/eclipse.png&amp;#34;&lt;/span&gt;
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Eclipse.org&amp;#34;&lt;/span&gt;
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;url=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://eclipse.org/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mapping&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespace=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.eclipse&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;repository&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kind=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bugzilla&amp;#34;&lt;/span&gt;
                          &lt;span style=&#34;color:#a6e22e&#34;&gt;url=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://bugs.eclipse.org/bugs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/mapping&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this at hand, I’d love to hear how you encourage your community to contribute back in form of bug reports and feature enhancements?&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://www.tasktop.com/blog/easy-error-reporting-your-users/&#34;&gt;Tasktop Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>What the heck are logical models?</title>
      <link>https://bmuskalla.github.io/blog/2011-09-07-logical-models/</link>
      <pubDate>Wed, 07 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2011-09-07-logical-models/</guid>
      <description>&lt;p&gt;Have you ever committed to the repository and got mail afterwards “Hey, this isn’t compiling!”? Likely you committed only some of the changes you made leaving out files required for a successful build. Let’s take a look at a simple example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/tt/model.png&#34; alt=&#34;emf ecore model&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this model we have a class element &lt;strong&gt;Some Class&lt;/strong&gt; in &lt;em&gt;my.ecore&lt;/em&gt; which extends &lt;strong&gt;AnAbstractClass&lt;/strong&gt; in &lt;em&gt;Your.ecore&lt;/em&gt;. In this scenario, we essentially have a dependency from &lt;em&gt;My.ecore&lt;/em&gt; to &lt;em&gt;Your.ecore&lt;/em&gt;. For example, renaming the class &lt;strong&gt;AnAbstractClass&lt;/strong&gt; in &lt;em&gt;Your.ecore&lt;/em&gt; also forces an update of the superclass property in &lt;em&gt;My.ecore&lt;/em&gt;. This means we need to handle this change atomically across both files. In Eclipse, this is a called a “Logical Model”.&lt;/p&gt;
&lt;p&gt;A logical model is not necessarily related to EMF but a general concept to represent related files. While we use EMF in this example, the same applies to resources given that there is a corresponding model provider (more on that later). In the past, using CVS or Git as your SCM of choice, committing only changes for one of these files resulted in a broken repository state. Fortunately the Eclipse Platform has had a solution build-in for exactly this problem for years. Being a platform though, Eclipse only provides the necessary hooks but not the actual implementations.&lt;/p&gt;
&lt;p&gt;While the Eclipse CVS integration already supports Logical Models, the support in EGit is currently being reviewed for inclusion in the next major release. This means, whenever you’re working with files that are part of a logical model and you’re about to operate on these files, EGit will help you to include all relevant artifacts. Let’s say are about to commit My.ecore to your repository. This will trigger EGit to reach out to the associated model providers asking the question “I want to work on file X, which files are needed to have a consistent model?”. In the case of .ecore files, the corresponding model provider is &lt;a href=&#34;http://www.eclipse.org/emf/compare/&#34;&gt;EMF Compare&lt;/a&gt; which answers the question and EGit shows a dialog to widen the scope of the commit operation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/tt/selection.png&#34; alt=&#34;selection adjustment&#34;&gt;&lt;/p&gt;
&lt;p&gt;This not only works when committing files to the repository but also when you replace or compare files with an older version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/tt/compare.png&#34; alt=&#34;selection adjustment&#34;&gt;&lt;/p&gt;
&lt;p&gt;The features in EGit are only one side of the equation. We also need a tool that identifies the list of resources that are related to a given set of files. In the open source Eclipse ecosystem, EMF Compare is currently the only provider that handles the notation of logical models. With the support in CVS and EGit, I hope more plugins will contribute model providers to help users keep their repositories stable.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://www.tasktop.com/blog/what-heck-are-logical-models/&#34;&gt;Tasktop Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Integrating Mylyn into your Git workflow</title>
      <link>https://bmuskalla.github.io/blog/2011-02-16-integrating-mylyn-git-workflow/</link>
      <pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2011-02-16-integrating-mylyn-git-workflow/</guid>
      <description>&lt;p&gt;In January, most of the EGit committers met at the “EGit Summit” in Walldorf, Germany. We had a blast hanging out together, planning the future direction for EGit/JGit, and implementing new features.&lt;/p&gt;
&lt;p&gt;Thanks again to the SAP team for hosting the event.&lt;/p&gt;
&lt;p&gt;As you can see on the whiteboard, there were numerous ideas suggested by the EGit committers who attended. We organized and prioritized the topics and then broke up into small teams. One user story that was commonly asked for was improved integration between EGit and Mylyn – Chris Aniszczyk (Red Hat), Manuel Doninger (Markant) and I (Tasktop) decided to form a team to make this improved integration real.&lt;/p&gt;
&lt;p&gt;“EGit Mylyn (Incubation)”, a new feature that came from our activities at the Summit, allows you to have a tighter integration between Mylyn and EGit. This feature is available from the current update site.&lt;/p&gt;
&lt;p&gt;We were fortunate to have a starting point from Manuel and others, and as result, by the end of the first day of the Summit, initial support for pre-populating the commit message from the active task was completed. This means that if you’re activly working on a task, once you fire up the commit dialog, it is prefilled with the commit message for the activated task. See the screenshots below.&lt;/p&gt;
&lt;p&gt;The industry analysts like Forrester and Gartner have been emphasizing the importance of visibility and traceability in today’s modern development efforts. One great feature we were able to implement for achieving better traceability is support for linking between commits and tasks. With this feature, once a you fire up the History view of your git project, you’re able to open up the task corresponding to the commit with a single click. We implemented the same feature for the Git Synchronize view as well.&lt;/p&gt;
&lt;p&gt;In the future, we want to work on an even tighter integration between EGit and Mylyn. One idea is per-task branching. This essentially means that if you activate a task, EGit automatically creates a “feature branch” for your task and later it will merge it back into the master branch for pushing upstream. Manuel already has a working prototype which will hopefully find its way into the EGit master soon. If you’re interested in this idea, take look at &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=309578&#34;&gt;this task&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides the Mylyn integration, many other new features and fixes found their way into the 0.11 stream of EGit. You may want to check out the &lt;a href=&#34;http://wiki.eclipse.org/EGit/New_and_Noteworthy/0.11&#34;&gt;New &amp;amp; Noteworthy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have your own ideas for how EGit and Mylyn can work together more seamlessly, please comment on this post or &lt;a href=&#34;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=EGit&amp;amp;rep_platform=All&amp;amp;op_sys=All&#34;&gt;open a new feature request&lt;/a&gt; in the EGit Bugzilla component. We always are excited to get new committers as well as new contributors to EGit who can help us make it an even better project.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://www.tasktop.com/blog/integrating-mylyn-your-git-workflow/&#34;&gt;Tasktop Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Using Equinox Security in RCP and RAP</title>
      <link>https://bmuskalla.github.io/blog/2010-05-13-using-equinox-security-in-rcp-and-rap/</link>
      <pubDate>Thu, 13 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-05-13-using-equinox-security-in-rcp-and-rap/</guid>
      <description>&lt;p&gt;I finally had the time to care about one of my outstanding tasks –
&lt;strong&gt;provide a tutorial and example how to use &lt;a href=&#34;https://www.eclipse.org/equinox/security/&#34;&gt;Equinox Security&lt;/a&gt;.&lt;/strong&gt;
While the tutorial was initially targeted for RAP users, I also added a
launch config and a target definition for RCP as the code is the same
for both runtimes. The tutorial will provide some hints and pointers how
to setup your login procedure, like shown below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsesource.com/wp-content/uploads/2010/05/rapsec_login.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rapsec_login.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After logging in (hint, hint), you’re able to inspect the currently
active Subject. I made up this example to be as &lt;strong&gt;simple&lt;/strong&gt; as possible
to demonstrate the key concepts of Equinox Security, and not the ones
from RAP/RCP.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsesource.com/wp-content/uploads/2010/05/rapsec_subject.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rapsec_subject.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As I said, you can either choose between RAP as runtime (above) or RCP
(below).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsesource.com/wp-content/uploads/2010/05/rcpsec_subject.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rcpsec_subject.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition to the authentication mechanism, I wrote a pretty simple
LoginModule to show how to connect your authentication process to an
alternative backend (eg. LDAP, Kerberos, …).&lt;/p&gt;
&lt;p&gt;As I put the &lt;a href=&#34;https://wiki.eclipse.org/RAP/Equinox_Security_Integration&#34;&gt;tutorial&lt;/a&gt; into the Eclipse wiki, I &lt;a href=&#34;https://eclipsesource.com/blogs/2009/07/13/crowdsourcing-documentation-at-eclipse/&#34;&gt;encourage&lt;/a&gt;
everyone to extend the tutorial with hints, tricks or ideas what you can
do with Equinox Security. Hope the tutorial helps to get up to speed how
to use secure your RCP/RAP applications.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/05/13/using-equinox-security-in-rcp-and-rap/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Google Summer of Code 2010 is on!</title>
      <link>https://bmuskalla.github.io/blog/2010-04-27-google-summer-of-code-2010-is-on/</link>
      <pubDate>Tue, 27 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-04-27-google-summer-of-code-2010-is-on/</guid>
      <description>&lt;p&gt;Finally the voting process for this years Google Summer of Code is over
and they &lt;a href=&#34;https://google-opensource.blogspot.com/2010/04/this-years-google-summer-of-code.html&#34;&gt;announced&lt;/a&gt; the accepted students. I’m really happy that so
many interesting proposals got trough and really looking forward to see
the outcome of all the student projects.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.google.com/soc&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/gsoc2010.jpeg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is the full list of the proposals that got accepted for 2010.&lt;br&gt;
&lt;strong&gt;Improve Eclipse Git integration&lt;/strong&gt;&lt;br&gt;
Student: Dariusz Luksza&lt;br&gt;
Mentor(s): Matthias Sohn&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WAR deployment for RAP/Equinox based applications&lt;/strong&gt;&lt;br&gt;
Student: Holger Staudacher&lt;br&gt;
Mentor(s): Ruediger Herrmann&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theme editor for RAP&lt;/strong&gt;&lt;br&gt;
Student: Benjamin Muskalla (IRC: benny`work)&lt;br&gt;
Mentor(s): Ruediger Herrmann&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rich Editor For Wiki Markup&lt;/strong&gt;&lt;br&gt;
Student: Harshana Eranga Martin&lt;br&gt;
Mentor(s): David Green&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index based model compare match engine&lt;/strong&gt;&lt;br&gt;
Student: Stefan Leopold&lt;br&gt;
Mentor(s): Cedric Brun&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Restlet integration with Equinox&lt;/strong&gt;&lt;br&gt;
Student: Rajeev Sampath&lt;br&gt;
Mentor(s): Bryan Hunt&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++ editor enhancements&lt;/strong&gt;&lt;br&gt;
Student: Tomasz Wesolowski&lt;br&gt;
Mentor(s): Alena Laskavaia&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS-SD based wide-area ECF discovery provider&lt;/strong&gt;&lt;br&gt;
Student: Markus Alexander Kuppe (IRC: lemmy)&lt;br&gt;
Mentor(s): Scott Lewis&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hudson Integration for Mylyn&lt;/strong&gt;&lt;br&gt;
Student: Markus Knittig&lt;br&gt;
Mentor(s): Steffen Pingel&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google Wave ECF provider&lt;/strong&gt;&lt;br&gt;
Student: Sebastian Schmidt (IRC: sebs)&lt;br&gt;
Mentor(s): Mustafa Isik&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrate GMF runtime with Mylyn task focused UI&lt;/strong&gt;&lt;br&gt;
Student: Yongming Luo&lt;br&gt;
Mentor(s): Mariot Chauvin&lt;/p&gt;
&lt;p&gt;Congratulations to all the students and a big kudos to the organizers
and mentors for their choice. As every year, it is pretty difficult to
dismiss so many other good proposals but there were only 11 slots
available this year for Eclipse. Looking forward to a great
&lt;a href=&#34;https://wiki.eclipse.org/Google_Summer_of_Code_2010#Projects&#34;&gt;summer&lt;/a&gt;!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/27/google-summer-of-code-2010-is-on/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Sketch your UI</title>
      <link>https://bmuskalla.github.io/blog/2010-04-26-sketch-your-ui/</link>
      <pubDate>Mon, 26 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-04-26-sketch-your-ui/</guid>
      <description>&lt;p&gt;From time to time, I’m in the situation when I want to &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=245308&#34;&gt;suggest&lt;/a&gt; a UI
change or even try to come up with a &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/14/revamping-eclipse-examples/&#34;&gt;completely&lt;/a&gt; new UI. While I
love programming, it may be easier in these situations to just “sketch”
the idea instead of really getting your feet wet. As many people asked
me what I use for UI sketches, I thought I should share it with you –
the tool is called &lt;a href=&#34;https://wireframesketcher.com&#34;&gt;WireframeSketcher&lt;/a&gt;. It’s “just” an Eclipse plugin
to create sketches pretty easily. As most of the UIs in my life are
SWT-based, WireframeSketcher comes with one absolutely cool feature –
turn an existing dialog into a sketch. Fire up any dialog, hit the magic
“Alt+Shift+F5” and you’re done. Is it that easy? Yes – I really love it.
Here is an example of the Import Wizard which I also used in &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/14/revamping-eclipse-examples/&#34;&gt;my latest
blog&lt;/a&gt; post to further modify it with my ideas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/import.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Not only is it easy to operate, it also has pretty good Eclipse
integration and you always find the things where you expect them (eg.
select and button and you can modify everything in the Properties View).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/button_props.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As Eclipse commiter, you can get a &lt;a href=&#34;https://wireframesketcher.com/buy.html&#34;&gt;free licence&lt;/a&gt; of the plugin or
you can buy the plugin from the author if you want to use it
commercially. Either way, give it a try the next time you want to mock a
new UI prototype.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/26/sketch-your-ui/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse DemoCamp 2010 in Mannheim</title>
      <link>https://bmuskalla.github.io/blog/2010-04-22-eclipse-democamp-2010-in-mannheim/</link>
      <pubDate>Thu, 22 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-04-22-eclipse-democamp-2010-in-mannheim/</guid>
      <description>&lt;p&gt;Ever been to &lt;a href=&#34;https://www.mannheim.de/&#34;&gt;Mannheim&lt;/a&gt;? If not – this is your chance to visit
this lovely city. For the Helios release, the guys behind the
&lt;a href=&#34;https://www.majug.de&#34;&gt;majug²&lt;/a&gt; (Mannheimer Java user Group) invite everybody to the Helios
&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_Helios_2010/Mannheim&#34;&gt;Democamp&lt;/a&gt; in June. And as &lt;a href=&#34;https://ianskerrett.wordpress.com/&#34;&gt;Ian&lt;/a&gt; already &lt;a href=&#34;https://twitter.com/IanSkerrett/status/12101160817&#34;&gt;found out&lt;/a&gt;: Yes, we
love our DemoCamps! It’s always great to have technical discussions over
a frosty beverage!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://farm3.static.flickr.com/2055/2455008482_b1def65090.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the moment, the attendee list is still pretty empty but &lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_Helios_2010/Mannheim#Who_Is_Attending&#34;&gt;save
yourself&lt;/a&gt; a seat while it’s not booked out – they only have 100 seats
available. Topics this year include &lt;a href=&#34;https://eclipse.org/egit&#34;&gt;EGit&lt;/a&gt;, &lt;a href=&#34;https://www.eclipse.org/rt/&#34;&gt;EclipseRT&lt;/a&gt;,
&lt;a href=&#34;https://www.android.com/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://www.springsource.org/roo&#34;&gt;Roo&lt;/a&gt;. Do you think a cool topic is missing? Step
up and give a demo about what you’re doing! I’m really looking forward
to see more demos of how people use Eclipse as IDE or runtime.&lt;/p&gt;
&lt;p&gt;[&lt;img src=&#34;https://wiki.eclipse.org/images/8/89/Eclipse-camp.gif&#34; alt=&#34;&#34; title=&#34;DemoCamp&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hope to see you there for another great DemoCamp and ad-hoc
Stammtisch!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/22/eclipse-democamp-2010-in-mannheim/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Drawing with RAP? Yup!</title>
      <link>https://bmuskalla.github.io/blog/2010-04-20-drawing-with-rap-yup/</link>
      <pubDate>Tue, 20 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-04-20-drawing-with-rap-yup/</guid>
      <description>&lt;p&gt;I have to admit, I’m a little nervous what happens with the &lt;a href=&#34;https://www.eclipse.org/rap&#34;&gt;RAP&lt;/a&gt;
community after this post. At least for me, the last days were pretty
exciting. Some days ago, Ivan from the RAP team committed the initial
support for a &lt;a href=&#34;https://www.eclipse.org/articles/Article-SWT-graphics/SWT_graphics.html&#34;&gt;GC&lt;/a&gt; (GraphicsContext) for RAP. Currently restricted to
the Canvas widget, the GC provides thousands of new use cases for RAP
applications. The work by Ivan and Tim is just gorgeous and will help
many developers to single-source their applications with even less
exceptions. In case you want to try it out in this second without
reading further, just fire up the RAP Examples demo and draw something
yourself 🙂&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rap_canvas_demo1.png&#34; alt=&#34;RAP with Canvas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Credits for the picture above goes to &lt;a href=&#34;https://eclipsesource.com/blogs/author/hstaudacher/&#34;&gt;Holger&lt;/a&gt; with the aim to come
up with a new RAP project logo 😉 After using the GC the first time in
the Examples demo, I thought about other possibilities to test the new
GC. My first thought: custom widgets? Tired of writing custom widgets in
JavaScript? Get your Canvas and single-source your custom widget with
RCP by writing an &lt;a href=&#34;https://www.eclipse.org/articles/Article-Writing%20Your%20Own%20Widget/Writing%20Your%20Own%20Widget.htm&#34;&gt;owner-draw widget&lt;/a&gt;. But as it was late in the
night, I decided to just reuse some existing owner-drawn widgets like
those we can find in the &lt;a href=&#34;https://www.eclipse.org/nebula&#34;&gt;Nebula&lt;/a&gt; project. After getting the
&lt;a href=&#34;https://www.eclipse.org/nebula/widgets/pshelf/pshelf.php&#34;&gt;PShelf&lt;/a&gt; widget from CVS, it was only a matter of seconds until I
started my first RAP application using an owner-drawn Nebula widget:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rebula_pshelf.png&#34; alt=&#34;Nebula PShelf on RAP&#34;&gt;&lt;/p&gt;
&lt;p&gt;And I think I know what most of you are currently thinking – Draw2D, GEF
and GMF on RAP? To keep it and short and simple: No! While it may be
possible to single source Draw2D with the exisiting Canvas, I’m pretty
sure it will not scale. The way Draw2D is implemented will cause major
performance problems with the browser-side Canvas widget. As I said, it
may be possible but not really preferable. For supporting Draw2D the
right technology on the client-side is there. Only on the server-side we
would need APIs that entirely hide the GC. Thus we could directly
translate from one vector-based technology to the other.&lt;/p&gt;
&lt;p&gt;I’m pretty excited to see how the community can profit from the new
Canvas implementation. Want to try it out? Either get the current RAP
runtime from &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;CVS&lt;/a&gt; or wait some days until we can publish RAP M7
(which has several other cool &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;new &amp;amp; noteworthy&lt;/a&gt;
items).&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/20/drawing-with-rap-yup/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Revamping Eclipse Examples?</title>
      <link>https://bmuskalla.github.io/blog/2010-04-14-revamping-eclipse-examples/</link>
      <pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-04-14-revamping-eclipse-examples/</guid>
      <description>&lt;p&gt;Even though I’ve been involved in the Eclipse community for around 5
years, I’m still amazed by the projects that are hosted under the
Eclipse umbrella. As an “insider”, I have a pretty good overview of many
projects and at least a rough picture of all the other cool stuff. While
I love working with &lt;a href=&#34;https://eclipse.org/rt/&#34;&gt;EclipseRT&lt;/a&gt; technologies like Equinox, RAP,
EclipseLink, ECF or &amp;lt;insert your project here&amp;gt;, I always find
myself in the same situation.  This stuff is awesome but do users really
get the point of what’s possible? Learning a new technology is always
hard, but if you want to develop enterprise-ready, scalable and vibrant
platforms using Eclipse components, there are so many obstacles to
overcome. You need to have at least a clue about OSGi/Equinox,
Extensions and their corresponding Extension points (for each for your
consumed modules) and many other things. I don’t want to say that
Eclipse is too complicated (which is a topic for another post anyway),
but what I would really like to see is a better way to get our future
consumers up to speed. As &lt;a href=&#34;https://en.wikipedia.org/wiki/Esther_Dyson&#34;&gt;Esther Dyson&lt;/a&gt; once said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A worker’s paradise is a consumer’s hell.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;a href=&#34;https://www.eclipse.org/examples&#34;&gt;Eclipse Examples&lt;/a&gt; project we wanted to provide a few
exemplary projects to show how to use different projects. In theory a
nice idea, but practically I don’t see that this effort was very
successful. Wayne and me discussed some ideas back in &lt;a href=&#34;https://dev.eclipse.org/mhonarc/lists/examples-dev/msg00010.html&#34;&gt;2008&lt;/a&gt; but
without a concrete outcome.  Thinking about this topic after EclipseCon,
my current thought was to provide easy ways for our consumers to try out
the bits and pieces of all the projects. What I constantly run into
though, is that you need to do so many things  before you can get
started, like setting up a target platform, making your examples depend
on the right bundles, using the right extension points/services/etc,
creating launch configurations. Many projects already helped themselves
by providing examples using PDE &lt;a href=&#34;https://help.eclipse.org/galileo/topic/org.eclipse.pde.doc.user/reference/extension-points/org_eclipse_pde_ui_templates.html&#34;&gt;templates&lt;/a&gt;. That’s the way I’d like
to tell newcomers how to get started and would push this even a little
further – the idea is to provide some infrastructure in the Examples
project to help others setting up their examples. The projects just
provide example bundles, maybe a target definition, a launch
configuration and a cheatsheet or something. In the end, the user should
be able to try out another Eclipse technology within 2 clicks: New
Example &amp;gt; That technology, run!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/examples_wizard.png&#34; alt=&#34;&#34; title=&#34;examples_wizard&#34;&gt;&lt;/p&gt;
&lt;p&gt;Basically PDE already provides many of these things but it’s not yet at
the point I would love to see it. It’s still too complex for consumers
to create target platforms (I know what I’m talking about), create their
launch configs and get started with the examples. While there are still
&lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=276000&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=169340&#34;&gt;hurdles&lt;/a&gt; to jump, I think our users and consumers would
thank us for getting them up to speed in seconds. It should even be
interesting for non-OSGi related examples as other projects thought
about &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=238144&#34;&gt;something like this&lt;/a&gt; for years. I don’t see a chance to have
this ready for Helios, but I’m pretty confident that we could do
something like this in the timeframe for the &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/08/helios-1-name-vote-for-your-favorite/&#34;&gt;I…&lt;/a&gt; release train.
Would other projects be interested in such an approach to distribute
their examples? Please leave a comment on &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=309081&#34;&gt;this bug&lt;/a&gt; if you do so to
collect ideas, wishes and requirements.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/04/14/revamping-eclipse-examples/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>EMF and RAP &amp; what a lovely pair</title>
      <link>https://bmuskalla.github.io/blog/2010-03-22-emf-and-rap-what-a-lovely-pair/</link>
      <pubDate>Mon, 22 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2010-03-22-emf-and-rap-what-a-lovely-pair/</guid>
      <description>&lt;p&gt;During the last weeks, &lt;a href=&#34;https://kenn-hussey.blogspot.com/&#34;&gt;Kenn&lt;/a&gt; and I worked together to support
&lt;a href=&#34;https://www.eclipse.org/modeling/emf/&#34;&gt;EMF&lt;/a&gt; generated editors running on RAP. I’m always mesmerized by how
effective such synergies can be used when people from different teams
work together for a bigger goal. Kudos to Kenn for his great work in EMF
by refactoring the EMF UI bundles (namely o.e.emf.ui.common and
o.e.emf.ui.edit) in order to single-source them. But what does that mean
for the community?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rapemf-e1269224344251.png&#34; alt=&#34;&#34; title=&#34;rapemf&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go out, grab EMF &amp;amp; RAP M6 from Helios, get your model ready, fire up
properties view and switch “Rich Ajax Platform” to true. Hit the magic
“Generate All” button and you’re done – an EMF backed RAP application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/emfrapapp-300x210.png&#34; alt=&#34;&#34; title=&#34;emfrapapp&#34;&gt;&lt;/p&gt;
&lt;p&gt;For the details, please refer to the &lt;a href=&#34;https://wiki.eclipse.org/RAP/EMF_Integration&#34;&gt;EMF/RAP integration&lt;/a&gt; wiki page.&lt;/p&gt;
&lt;p&gt;In case you want to see what else is going on in the RAP space right
now, I’ll be giving a &lt;a href=&#34;https://www.eclipsecon.org/2010/sessions/?page=sessions&amp;amp;id=1470&#34;&gt;RAP 1.3 N&amp;amp;N talk&lt;/a&gt; tomorrow at EclipseCon.
Hope to see you there!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2010/03/22/emf-and-rap-what-a-lovely-pair/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>EclipseRT &amp; RAP around the world</title>
      <link>https://bmuskalla.github.io/blog/2009-11-23-eclipsert-rap-around-the-world/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-11-23-eclipsert-rap-around-the-world/</guid>
      <description>&lt;p&gt;We’re all looking forward to talk about EclipseRT, Equinox and RAP at
the DemoCamps around the world. In case you want to catch us and talk
about Eclipse and related topics, just join one of the DemoCamps near
you. Besides many other interesting talks, we’ll mostly cover EclipseRT,
RAP and p2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wiki.eclipse.org/images/8/89/Eclipse-camp.gif&#34; alt=&#34;&#34; title=&#34;Eclipse
DemoCamps&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Ottawa&#34; title=&#34;Eclipse DemoCamps November 2009/Ottawa&#34;&gt;Ottawa&lt;/a&gt;, ON, Canada – November 24 – Jeff McAffer (EclipseRT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Braunschweig/Hanover&#34; title=&#34;Eclipse DemoCamps November 2009/Braunschweig/Hanover&#34;&gt;Braunschweig/Hanover&lt;/a&gt;, Germany – November 25 – Benjamin Muskalla (RAP)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Stuttgart&#34; title=&#34;Eclipse DemoCamps November 2009/Stuttgart&#34;&gt;Stuttgart&lt;/a&gt;, Germany – November 26 – Jordi Boehme Lopez (p2)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Kaiserslautern&#34; title=&#34;Eclipse DemoCamps November 2009/Kaiserslautern&#34;&gt;Kaiserslautern&lt;/a&gt;, Germany – November 26 – Holger Staudacher (RAP)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Frankfurt&#34; title=&#34;Eclipse DemoCamps November 2009/Frankfurt&#34;&gt;Frankfurt&lt;/a&gt;, Germany – November 26 – Benjamin Muskalla
(EclipseRT,RAP)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Vienna&#34; title=&#34;Eclipse DemoCamps November 2009/Vienna&#34;&gt;Vienna&lt;/a&gt;, Austria – November 30 – Chris Anisczcyk and Jeff
McAffer (RAP,EclipseRT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Karlsruhe&#34; title=&#34;Eclipse DemoCamps November 2009/Karlsruhe&#34;&gt;Karlsruhe&lt;/a&gt;, Germany – December 3 – Markus Knauer, Benjamin
Muskalla (EclipseRT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Eclipse_DemoCamps_November_2009/Hamburg&#34; title=&#34;Eclipse DemoCamps November 2009/Hamburg&#34;&gt;Hamburg&lt;/a&gt;, Germany – December 4 – Jochen Krause (RAP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m really looking forward to see you at the DemoCamps, as always it
tends to be a lot of fun!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/11/23/eclipsert-rap-around-the-world/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse RAP 1.3 M3 hits the road</title>
      <link>https://bmuskalla.github.io/blog/2009-11-16-eclipse-rap-1-3-m3-hits-the-road/</link>
      <pubDate>Mon, 16 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-11-16-eclipse-rap-1-3-m3-hits-the-road/</guid>
      <description>&lt;p&gt;After another 6 weeks of working hard towards the &lt;a href=&#34;https://wiki.eclipse.org/Helios&#34;&gt;Helios&lt;/a&gt; Release,
we’re a step closer. RAP M3 for Eclipse 3.6 is out and can be
&lt;a href=&#34;https://eclipse.org/rap/downloads/&#34;&gt;obtained&lt;/a&gt; from the RAP project page. Besides another &lt;a href=&#34;https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced&amp;amp;short_desc_type=allwordssubstr&amp;amp;short_desc=&amp;amp;classification=RT&amp;amp;product=RAP&amp;amp;target_milestone=1.3+M3&amp;amp;long_desc_type=allwordssubstr&amp;amp;long_desc=&amp;amp;bug_file_loc_type=allwordssubstr&amp;amp;bug_file_loc=&amp;amp;status_whiteboard_type=allwordssubstr&amp;amp;status_whiteboard=&amp;amp;keywords_type=allwords&amp;amp;keywords=&amp;amp;bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;bug_status=CLOSED&amp;amp;emailtype1=substring&amp;amp;email1=&amp;amp;emailtype2=substring&amp;amp;email2=&amp;amp;bugidtype=include&amp;amp;bug_id=&amp;amp;votes=&amp;amp;chfieldfrom=&amp;amp;chfieldto=Now&amp;amp;chfieldvalue=&amp;amp;cmdtype=doit&amp;amp;order=Reuse+same+sort+as+last+time&amp;amp;field0-0-0=noop&amp;amp;type0-0-0=noop&amp;amp;value0-0-0=&#34;&gt;130
bugfixes&lt;/a&gt; and many &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;New and Noteworthy&lt;/a&gt; features, here are my
personal favorites of this milestone:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-shared SWT resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, we decided to provide constructors and a dispose mechanism for
SWT resources like fonts, images, colors and cursors. While we still
recommend to use the factory-based approach, this features helps a lot
when single-sourcing applications that use the resource constructors in
a verbose manner.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsesource.com/wp-content/uploads/2009/11/color_ctor.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/color_ctor.png&#34; alt=&#34;RWT Resource constructors&#34;&gt;&lt;/a&gt;
Yay, it compiles!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Browser History support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You now have the possibility to interact with the client-side browser
history. This allows you to set “bookmarks” (eg. when switching tabs or
processing a particular workflow) and the user can jump back and
forward. Thanks again to Ralf Zahn from ARS who &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=283291&#34;&gt;contributed&lt;/a&gt; this
feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dispose events on session timeout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We also introduced new Listener support on the Display so you’re now
able to listen for Dispose events of the Display which is triggered when
the session terminates. This way you don’t need to rely on
servlet-specific API but rather use the same mechanism as in SWT to
clean up your session. In addition you can queue runnables via
Display#disposeExec that are executed once the session dies.&lt;/p&gt;
&lt;p&gt;I hope you all enjoy the new milestone and give as feedback as fast as
possible, API and feature freeze  is approaching 😉&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/11/16/eclipse-rap-1-3-m3-hits-the-road/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse RAP 1.3 M2 Released</title>
      <link>https://bmuskalla.github.io/blog/2009-10-08-eclipse-rap-1-3-m2-released/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-10-08-eclipse-rap-1-3-m2-released/</guid>
      <description>&lt;p&gt;The RAP team is proud to announce the &lt;a href=&#34;https://www.eclipse.org/rap/downloads/&#34;&gt;second milestone&lt;/a&gt; for the
Helios release.&lt;/p&gt;
&lt;p&gt;As Holger already mentioned in &lt;a href=&#34;https://eclipsesource.com/blogs/2009/09/02/new-fancy-rich-ajax-platform-rap-theme/&#34;&gt;his blog post&lt;/a&gt;, part of the milestone
is a new design option for RAP applications. You can either use it as is
or customize it depending on your needs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsesource.com/wp-content/uploads/2009/10/fancy.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/fancy-300x194.png&#34; alt=&#34;RAP Fancy Design&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Together with the new fancy design, there is also a new Configuration
dialog to enable and disable the view actions per stack. Additionally we
added an effect called &lt;a href=&#34;https://en.wikipedia.org/wiki/Lightbox_(JavaScript)&#34;&gt;Lightbox&lt;/a&gt; which occurs when the dialog is
open.&lt;/p&gt;
&lt;p&gt;Another thing I’m pretty excited about – the help system. The RAP
runtime doesn’t provide everything you need for the whole help system,
we just provide the infrastructure to plug in any help system
implementation you want. Depending on your needs you can either use a
&lt;a href=&#34;https://wiki.eclipse.org/RAP/FAQ#How_to_integrate_the_Eclipse_Help_System_in_a_RAP_application.3F&#34;&gt;pretty simple implementation&lt;/a&gt; or single-source the real help system
implementation (org.eclipse.help.ui) yourself (great chance to get
involved by the way).&lt;/p&gt;
&lt;p&gt;For those of you who are working a lot with tabular data, we now provide
cell tooltips on the TableViewer if you use a CellLabelProvider. This
enables you to provide tooltips on the fly for all of your table cells.&lt;/p&gt;
&lt;p&gt;Looking at this milestone in numbers, we fixed 100 bugs and resolved 36
enhancements – this includes another 23 new APIs that are now available
for you. We’re pretty excited about the Helios release and looking
forward to the next milestone.&lt;/p&gt;
&lt;p&gt;Be sure to check out the whole &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;New &amp;amp; Noteworthy&lt;/a&gt; as there are
much more details we added in M2!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/10/08/eclipse-rap-1-3-m2-released/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Picasso paints the web with RAP</title>
      <link>https://bmuskalla.github.io/blog/2009-09-11-picasso-paints-the-web/</link>
      <pubDate>Fri, 11 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-09-11-picasso-paints-the-web/</guid>
      <description>&lt;p&gt;Whenever I’m working on UI stuff, something always goes terribly wrong 😉
Sometimes it’s only a margin or padding, other times it a composite that
crosses my path. I was pretty happy that Chris Aniszczyk and Simon
Archer hacked together &lt;a href=&#34;https://aniszczyk.org/2008/05/04/painting-the-workbench/&#34;&gt;Picasso&lt;/a&gt;, which helps you to identify some of
these layout issues. As you may know, most of the time I work on the
&lt;a href=&#34;https://www.eclipse.org/rap&#34;&gt;Rich Ajax Platform&lt;/a&gt; (RAP) and come across the same issues. As
&lt;a href=&#34;https://wiki.eclipse.org/PDE/Incubator/Picasso&#34;&gt;Picasso&lt;/a&gt; was originally intended to work for RCP, it’s not a long
way to get it working for RAP.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipsesource.com/wp-content/uploads/2009/02/picasso_on_rap.png&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/picasso_on_rap-300x225.png&#34; alt=&#34;Picasso on RAP&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you’re struggling with these issues too –  and working on RAP
applications, please add your vote to &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=267975&#34;&gt;bug 267975&lt;/a&gt; so we can use
Picasso on both runtimes.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/09/11/picasso-paints-the-web/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse e4 on the web</title>
      <link>https://bmuskalla.github.io/blog/2009-08-25-e4-on-the-web/</link>
      <pubDate>Tue, 25 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-08-25-e4-on-the-web/</guid>
      <description>&lt;p&gt;With &lt;a href=&#34;https://eclipsesource.com/blogs/2009/08/03/eclipse-e4-0-9-alpha-release/&#34;&gt;e4 0.9&lt;/a&gt; out in the wild, we should think again about the goals
e4 tries to provide. One of them was to reduce the gap between Desktop
and Web – not only speaking of reusing widgets but also to enable the
platform handle multi-user scenarios. While the core e4 team
concentrated on eliminating bad smells like singletons, the RAP team
worked on better support for single sourcing applications in general.
With an experimental version of RAP which includes some features not yet
in the current release, we were able to run the demo out of the box
including the whole underlying infrastructure like the modeled workbench
– without touching the e4 code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eclipse.org/rap/demos.php&#34;&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/e4_contacts.png&#34; alt=&#34;e4\_contacts&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you take a look at the &lt;a href=&#34;https://eclipse.org/rap/demos.php&#34;&gt;RAP Demos&lt;/a&gt; page you’ll find the e4
contacts demo running on RAP. If you want to try it out yourself or even
help to contribute to this effort, take a look this &lt;a href=&#34;https://wiki.eclipse.org/E4/RAP_Integration/Experimental&#34;&gt;wiki page&lt;/a&gt;. In
case you’re interested what you can do with e4, be sure to participate
in the &lt;a href=&#34;https://www.eclipse.org/community/e4webinar/abstracts.php&#34;&gt;e4 webinars&lt;/a&gt;.This week, there will be Part 2 with topics like
RAP, the Compatibility layer and the flexible resources model. Looking
at the questions that came up in the last &lt;a href=&#34;https://live.eclipse.org/node/718&#34;&gt;RAP webinar&lt;/a&gt; and the first
part of the E4 webinar, people seem to be very interested how e4 and RAP
play together. I’ll try to answer the open questions during the webinar
this week. Looking forward to a great event.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/08/25/e4-on-the-web/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Integrating BIRT into RAP applications</title>
      <link>https://bmuskalla.github.io/blog/2009-07-06-integrating-birt-into-rap-applications/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-07-06-integrating-birt-into-rap-applications/</guid>
      <description>&lt;p&gt;Finally I had some time to write down some of my experiences with
integrating the &lt;a href=&#34;https://www.eclipse.org/birt&#34;&gt;Business Intelligence Reporting Tools&lt;/a&gt; (BIRT) into a
&lt;a href=&#34;https://www.eclipse.org/rap&#34;&gt;Rich Ajax Platform&lt;/a&gt; (RAP) application. I wrote it all down in a
&lt;a href=&#34;https://wiki.eclipse.org/RAP/BIRT_Integration&#34;&gt;small tutorial&lt;/a&gt; that shows how you can integrate charts and reports
seamlessly in your RAP application. Topics covered in the tutorial
include how to setup the environment to let BIRT and RAP play well
together.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.eclipse.org/RAP/BIRT_Integration&#34;&gt;&lt;img src=&#34;https://wiki.eclipse.org/images/8/89/Birt_rap_chart_demo.png&#34; alt=&#34;BIRT and RAP integration&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many thanks to BIRT committer, Virgil Dodson, to help with this
tutorial- it was really great to get Eclipse committers from different
projects working together!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/07/06/integrating-birt-into-rap-applications/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse Galileo and RAP</title>
      <link>https://bmuskalla.github.io/blog/2009-07-03-galileo-and-the-rap-runtime/</link>
      <pubDate>Fri, 03 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-07-03-galileo-and-the-rap-runtime/</guid>
      <description>&lt;p&gt;As Galileo is out in the wild and we are all already working on Helios…
I thought it would be handy to give a quick overview of the &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;New and
Noteworthy&lt;/a&gt; features the RAP team worked on for Galileo. Besides
many, many bug fixes… we still found time to provide several new
features. On top of the new features, we focused on making single
sourcing even easier to do.&lt;/p&gt;
&lt;h4 id=&#34;new-look-and-feel&#34;&gt;New Look and Feel&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/rap_addressbook_business-300x258.png&#34; alt=&#34;rap\_addressbook\_business&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is one of the biggest features of RAP released as part of the
train. As &lt;a href=&#34;https://eclipsesource.com/blogs/2009/06/17/eclipse-galileo-feature-top-10-list-number-8/&#34;&gt;Ian&lt;/a&gt; already pointed out correctly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: arial, helvetica, sans-serif; line-height:
normal; font-size: 12px; color: #4d4d4d;&#34;&gt;One of the common complaints
about RAP was that it doesn’t look like a &lt;strong&gt;web application&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While this was true in the past, we worked really hard to provide the
community a clean and easy way &lt;a href=&#34;https://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.rap.help/help/html/advanced/look-and-feel.html&#34;&gt;how to&lt;/a&gt; customize the whole workbench
styling.&lt;/p&gt;
&lt;h4 id=&#34;cell-editors&#34;&gt;Cell Editors&lt;/h4&gt;
&lt;p&gt;It’s finally done – RAP supports cell editors in the Table. As this was
a really long-standing issue we’re more than happy to have it in 1.2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/celleditors-300x199.png&#34; alt=&#34;Celleditors inRAP&#34; title=&#34;Celleditors in RAP&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ed, now it’s time to give the whole “&lt;a href=&#34;https://ed-merks.blogspot.com/2008/01/emf-and-rap-go-great-together-too.html&#34;&gt;generated EMF editor on RAP&lt;/a&gt;”
idea a new spin! For anybody interested in this story, please CC
yourself on &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=213988&#34;&gt;this bug&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;performance-amp-memory&#34;&gt;Performance &amp;amp; Memory&lt;/h4&gt;
&lt;p&gt;The RAP team really had a great time for this release – we just sat
there and waited for the browsers to become even faster…as this was a
really silly task we decided to do something:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improvement of Session Startup Performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First the creating of the startup page is less CPU intensive. Second the
javascript library content is not embedded in the startup page anymore
and will be delivered separately. As the library content doesn’t change
after server start it can be zipped once and buffered. This reduces CPU
usage significantly. The library is stored in the browser’s cache and
need not to be reloaded on subsequent application visits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client-side memory improvements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Included is also a new version of the Javascript library &lt;a href=&#34;https://qooxdoo.org&#34;&gt;qooxdoo&lt;/a&gt;.
Thanks to the great support by the RAP
community, most notably from Stefan Hansel who tracked down a number of
significant memory leaks in qooxdoo and provided patches to the qooxdoo
developers, this version now brings a major improvement in client memory
consumption. With this qooxdoo version, the long-standing memory leakage
problems of RAP especially in Internet Explorer are resolved. Thanks to
everyone who helped making this possible!&lt;/p&gt;
&lt;h4 id=&#34;new-api-amp-widgets&#34;&gt;New API &amp;amp; Widgets&lt;/h4&gt;
&lt;p&gt;With the idea of &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;single sourcing&lt;/a&gt; in mind we concentrated on adding
new API to allow even more reuse of existing SWT/RCP code. Besides many
small things like Display#timerExec() we also tried to complete the set
of widgets. With 8 (yes, eight) new widgets in this release, these two
are my personal favorites and often requested by the community.&lt;/p&gt;
&lt;h4 id=&#34;datetime&#34;&gt;DateTime&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/RAPDateTime.png&#34; alt=&#34;RAPDateTime&#34; title=&#34;RAPDateTime&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;formtext-forms&#34;&gt;FormText (Forms)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/RAPFormText-300x148.png&#34; alt=&#34;RAPFormText&#34; title=&#34;RAPFormText&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;cursor-support&#34;&gt;Cursor Support&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://bmuskalla.github.io/blog/es/RAPCustomCursor.png&#34; alt=&#34;RAPCustomCursor&#34; title=&#34;RAPCustomCursor&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;
&lt;p&gt;In case you’re not yet sure how “single sourcing” works – Ralf and
Rüdiger would be happy to explain it to you step-by-step in their
upcoming &lt;a href=&#34;https://live.eclipse.org/node/718&#34;&gt;webinar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In summary, we’re quite happy with the current 1.2 release but are
already looking forward to the Helios release train.&lt;/p&gt;
&lt;p&gt;If you have anything you want to see in 1.3, don’t hesitate and drop us
a &lt;a href=&#34;https://eclipse.org/rap/&#34;&gt;note&lt;/a&gt;.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/07/03/galileo-and-the-rap-runtime/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Tease the RAP committers!</title>
      <link>https://bmuskalla.github.io/blog/2009-03-13-tease-the-rap-committers/</link>
      <pubDate>Fri, 13 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bmuskalla.github.io/blog/2009-03-13-tease-the-rap-committers/</guid>
      <description>&lt;p&gt;Ok, it’s getting tough. Only 9 days left before EclipseCon officially
starts. All contributors and committers around me are already swarming
around to get the demos and presentations ready – besides fixing bugs
for the upcoming &lt;a href=&#34;https://wiki.eclipse.org/Galileo#Milestones_and_Release_Candidates&#34;&gt;M6 build&lt;/a&gt;. But why is everybody so excited about
EclipseCon? I think the numerous talks are only one side of the coin.
Personally the way more interesting part is the come-together of all
people you know from bug reports, mailing lists and newsgroups. While it
is nice to see each other, it often brings up great discussions about
Eclipse technology – especially interesting for me: &lt;a href=&#34;https://www.eclipse.org/rap&#34;&gt;RAP&lt;/a&gt; and
&lt;a href=&#34;https://www.eclipse.org/e4/&#34;&gt;E4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The number of &lt;a href=&#34;https://www.eclipsecon.org/2009/bofs&#34;&gt;BoFs&lt;/a&gt; this year is tremendous. If you’re developing
RAP applications or planning to use RAP in the near future, you should
definitly visit me and the &lt;a href=&#34;https://www.eclipse.org/rap/users/&#34;&gt;rest of the team&lt;/a&gt; at the &lt;a href=&#34;https://wiki.eclipse.org/EclipseCon_2009/BoF/RAP&#34;&gt;RAP BoF&lt;/a&gt;. As
this is the first BoF for the RAP project we’re really excited to see
who’s coming. If you’re planning to attend, why don’t you just add some
of your ideas to the &lt;a href=&#34;https://wiki.eclipse.org/EclipseCon_2009/BoF/RAP&#34;&gt;list of discussion topics&lt;/a&gt;? The intention of
BoFs is that you have the chance to talk directly with the RAP
committers and give the team the chance to see your standpoints. Take
the chance to poke us for all the &lt;a href=&#34;https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced&amp;amp;short_desc_type=allwordssubstr&amp;amp;short_desc=&amp;amp;product=RAP&amp;amp;long_desc_type=allwordssubstr&amp;amp;long_desc=&amp;amp;bug_file_loc_type=allwordssubstr&amp;amp;bug_file_loc=&amp;amp;status_whiteboard_type=allwordssubstr&amp;amp;status_whiteboard=&amp;amp;keywords_type=nowords&amp;amp;keywords=plan&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;bug_severity=blocker&amp;amp;bug_severity=critical&amp;amp;bug_severity=major&amp;amp;bug_severity=normal&amp;amp;bug_severity=minor&amp;amp;bug_severity=trivial&amp;amp;bug_severity=enhancement&amp;amp;emailtype1=substring&amp;amp;email1=&amp;amp;emailtype2=substring&amp;amp;email2=&amp;amp;bugidtype=include&amp;amp;bug_id=&amp;amp;votes=&amp;amp;chfieldfrom=&amp;amp;chfieldto=Now&amp;amp;chfieldvalue=&amp;amp;cmdtype=doit&amp;amp;order=Bug+Number&amp;amp;field0-0-0=noop&amp;amp;type0-0-0=noop&amp;amp;value0-0-0=&#34;&gt;bugs&lt;/a&gt; we didn’t fix yet 😉 Or if
you’re interested to see any of the long-standing feature requests to be
added to the plan – no problem (at least if you have enough beer for the
team)! We’re looking forward to some lively discussions – not just as
part of the BoF!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Originally published on &lt;a href=&#34;https://eclipsesource.com/blogs/2009/03/13/tease-the-rap-committers/&#34;&gt;EclipseSource Blog&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>